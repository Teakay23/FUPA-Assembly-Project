Microsoft (R) Macro Assembler Version 14.28.29336.0	    01/19/21 23:50:48
My First Program (Test.asm				     Page 1 - 1


				TITLE My First Program (Test.asm)
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 45 6E 74 65 72	AskSectionName byte "Enter Section Names (20 character max):",10,13, 0
	   20 53 65 63 74
	   69 6F 6E 20 4E
	   61 6D 65 73 20
	   28 32 30 20 63
	   68 61 72 61 63
	   74 65 72 20 6D
	   61 78 29 3A 0A
	   0D 00
 0000002A 45 6E 74 65 72	AskTestName byte "Enter Quiz Name (50 characters max): ", 0
	   20 51 75 69 7A
	   20 4E 61 6D 65
	   20 28 35 30 20
	   63 68 61 72 61
	   63 74 65 72 73
	   20 6D 61 78 29
	   3A 20 00
 00000050 46 41 53 54 2D	TestName byte "FAST-NU FUPA Test", 0, 32 DUP(0)
	   4E 55 20 46 55
	   50 41 20 54 65
	   73 74 00
	   00000020 [
	    00
	   ]
 00000082 53 65 63 74 69	SectionStr byte "Section(s):", 0
	   6F 6E 28 73 29
	   3A 00
 0000008E 53 65 63 74 69	SectionStr2 byte "Section", 0
	   6F 6E 00
 00000096 45 6E 67 6C 69	Section1Name byte "English", 0, 12 DUP(0)
	   73 68 00
	   0000000C [
	    00
	   ]
 000000AA 4D 61 74 68 65	Section2Name byte "Mathematics", 0, 8 DUP(0)
	   6D 61 74 69 63
	   73 00
	   00000008 [
	    00
	   ]
 000000BE 50 68 79 73 69	Section3Name byte "Physics", 0, 12 DUP(0)
	   63 73 00
	   0000000C [
	    00
	   ]
 000000D2 43 68 65 6D 69	Section4Name byte "Chemistry", 0, 10 DUP(0)
	   73 74 72 79 00
	   0000000A [
	    00
	   ]
 000000E6 50 72 6F 67 2E	Section5Name byte "Prog. Fundamentals", 0, 1 DUP(0)
	   20 46 75 6E 64
	   61 6D 65 6E 74
	   61 6C 73 00
	   00000001 [
	    00
	   ]
 000000FA 51 75 65 73 74	QuestionNoStr byte "Question No.", 0
	   69 6F 6E 20 4E
	   6F 2E 00
 00000107 54 6F 74 61 6C	TimeStr byte "Total Time: ", 0
	   20 54 69 6D 65
	   3A 20 00
 00000114 54 69 6D 65 3A	TimeStr2 byte "Time: ", 0
	   20 00
 0000011B 54 69 6D 65 20	TimeStr3 byte "Time Left: ",0
	   4C 65 66 74 3A
	   20 00
 00000127 20 6D 69 6E 75	MinutesStr byte " minutes", 0
	   74 65 73 00
 00000130 54 49 4D 45 20	timeOverStr byte "TIME IS UP FOR THIS SECTION!", 0
	   49 53 20 55 50
	   20 46 4F 52 20
	   54 48 49 53 20
	   53 45 43 54 49
	   4F 4E 21 00
 0000014D 45 6E 74 65 72	mainMenu byte "Enter a number to select:", 13, 10, 0
	   20 61 20 6E 75
	   6D 62 65 72 20
	   74 6F 20 73 65
	   6C 65 63 74 3A
	   0D 0A 00
 00000169 31 2E 20 46 55	teacherStr byte "1. FUPA Teacher", 0
	   50 41 20 54 65
	   61 63 68 65 72
	   00
 00000179 32 2E 20 46 55	studentStr byte "2. FUPA Student", 0
	   50 41 20 53 74
	   75 64 65 6E 74
	   00
 00000189 53 74 75 64 65	StudentTeacherMenuFile byte "Student_Teacher_Menu.txt", 0
	   6E 74 5F 54 65
	   61 63 68 65 72
	   5F 4D 65 6E 75
	   2E 74 78 74 00
 000001A2 53 65 6C 65 63	ChoiceSelectionMenuFile byte "Select_Choices_Menu.txt", 0
	   74 5F 43 68 6F
	   69 63 65 73 5F
	   4D 65 6E 75 2E
	   74 78 74 00
 000001BA 54 65 61 63 68	TeacherMenu2File byte "Teacher_Menu_2.txt", 0
	   65 72 5F 4D 65
	   6E 75 5F 32 2E
	   74 78 74 00
 000001CD 53 74 75 64 65	StudentMenu2File byte "Student_Menu_2.txt", 0
	   6E 74 5F 4D 65
	   6E 75 5F 32 2E
	   74 78 74 00
 000001E0 45 6E 74 65 72	quizcodeStr byte "Enter 8 character long Quiz Code: ", 0
	   20 38 20 63 68
	   61 72 61 63 74
	   65 72 20 6C 6F
	   6E 67 20 51 75
	   69 7A 20 43 6F
	   64 65 3A 20 00
 00000203 51 75 69 7A 20	quizcodeStr2 byte "Quiz code has to be 8 characters long. Please Re-enter", 13, 10, 0
	   63 6F 64 65 20
	   68 61 73 20 74
	   6F 20 62 65 20
	   38 20 63 68 61
	   72 61 63 74 65
	   72 73 20 6C 6F
	   6E 67 2E 20 50
	   6C 65 61 73 65
	   20 52 65 2D 65
	   6E 74 65 72 0D
	   0A 00
 0000023C 49 6E 63 6F 72	quizcodeStr3 byte "Incorrect Quiz code. Try Again!", 13, 10, 0
	   72 65 63 74 20
	   51 75 69 7A 20
	   63 6F 64 65 2E
	   20 54 72 79 20
	   41 67 61 69 6E
	   21 0D 0A 00
 0000025E  0000000A [		quizcode byte 10 DUP(0)
	    00
	   ]
 00000268  00000008 [		txtStr byte 8 DUP(0), ".txt", 0
	    00
	   ] 2E 74 78 74
	   00
 00000275  00000BEA [		StudentTeacherMenuPrint byte 3050 DUP(0)
	    00
	   ]
 00000E5F  00000834 [		ChoiceSelectionMenuPrint byte 2100 DUP(0)
	    00
	   ]
 00001693 0000			t_marks word ?
 00001695 72 65 63 6F 72	recordname byte "record.txt", 0
	   64 2E 74 78 74
	   00
 000016A0 66 75 70 61 31	password byte "fupa1234", 0
	   32 33 34 00
 000016A9  00000014 [		passwordInput byte 20 DUP(0)
	    00
	   ]
 000016BD 45 6E 74 65 72	passwordStr byte "Enter administrator password: ", 0
	   20 61 64 6D 69
	   6E 69 73 74 72
	   61 74 6F 72 20
	   70 61 73 73 77
	   6F 72 64 3A 20
	   00
 000016DC 54 68 65 20 50	incorrectPass byte "The Password you entered is incorrect. Redirecting to Main Menu.", 0
	   61 73 73 77 6F
	   72 64 20 79 6F
	   75 20 65 6E 74
	   65 72 65 64 20
	   69 73 20 69 6E
	   63 6F 72 72 65
	   63 74 2E 20 52
	   65 64 69 72 65
	   63 74 69 6E 67
	   20 74 6F 20 4D
	   61 69 6E 20 4D
	   65 6E 75 2E 00
 0000171D 54 49 4D 45 20	timeIsUp byte "TIME IS UP FOR THIS SECTION!", 0, "You will be allowed to answer this last question.", 0
	   49 53 20 55 50
	   20 46 4F 52 20
	   54 48 49 53 20
	   53 45 43 54 49
	   4F 4E 21 00 59
	   6F 75 20 77 69
	   6C 6C 20 62 65
	   20 61 6C 6C 6F
	   77 65 64 20 74
	   6F 20 61 6E 73
	   77 65 72 20 74
	   68 69 73 20 6C
	   61 73 74 20 71
	   75 65 73 74 69
	   6F 6E 2E 00
 0000176C 00			timeStatus byte 0
 0000176D 54 68 69 73 20	wrongTimeStr byte "This quiz is not open at this time.", 0, "ACCESS DENIED!", 0
	   71 75 69 7A 20
	   69 73 20 6E 6F
	   74 20 6F 70 65
	   6E 20 61 74 20
	   74 68 69 73 20
	   74 69 6D 65 2E
	   00 41 43 43 45
	   53 53 20 44 45
	   4E 49 45 44 21
	   00
 000017A0 45 6E 61 62 6C	negativeMarkingStr BYTE "Enable negative marking in this quiz? [y/n]: ", 0
	   65 20 6E 65 67
	   61 74 69 76 65
	   20 6D 61 72 6B
	   69 6E 67 20 69
	   6E 20 74 68 69
	   73 20 71 75 69
	   7A 3F 20 5B 79
	   2F 6E 5D 3A 20
	   00
 000017CE 0D 0A 50 72 65	negativeMarkingError BYTE 0Dh, 0Ah, "Press 'y' or 'n' (lowercase) to select an option.", 0Dh, 0Ah, 0
	   73 73 20 27 79
	   27 20 6F 72 20
	   27 6E 27 20 28
	   6C 6F 77 65 72
	   63 61 73 65 29
	   20 74 6F 20 73
	   65 6C 65 63 74
	   20 61 6E 20 6F
	   70 74 69 6F 6E
	   2E 0D 0A 00
 00001804 00			negativeByte BYTE ?
 00001805 65 72 72 6F 72	audioFileError byte "error.wav", 0
	   2E 77 61 76 00
 0000180F 74 69 6D 65 75	audioFileTimeUp byte "timeup.wav", 0
	   70 2E 77 61 76
	   00

 00000010			Score_Card STRUCT
 00000000  00000000			score_points sdword ?
 00000004  0000000A [			roll_no byte 10 dup(0)
	    00
	   ]
 0000000E  0000				total_marks word ?
				Score_Card ENDS

 0000181A  00000014 [		scores Score_Card 20 Dup({-1, 10 dup(0) , 0})
	    FFFFFFFF
	    0000000A [
	     00
	    ] 0000
	   ]

 0000195A 2A 51 55 49 5A	score_msg byte "*QUIZ RESULTS*", 0
	   20 52 45 53 55
	   4C 54 53 2A 00
 00001969 52 6F 6C 6C 20	score_msg2 byte "Roll Number       Marks      Total Marks", 0
	   4E 75 6D 62 65
	   72 20 20 20 20
	   20 20 20 4D 61
	   72 6B 73 20 20
	   20 20 20 20 54
	   6F 74 61 6C 20
	   4D 61 72 6B 73
	   00

 00000014			_INPUT_RECORD STRUCT
 00000000  0000			    EventType   WORD ?
 00000002  0000			    WORD ?                    ;to align to dword boundary
				    UNION 
 00000004  00000000 0000	        KeyEvent              KEY_EVENT_RECORD          <>
	   0000 0000 0000
	   00000000
				        MouseEvent            MOUSE_EVENT_RECORD        <>
				        Position WINDOW_BUFFER_SIZE_RECORD <>
				        ENDS
				_INPUT_RECORD ENDS

 00001992 00000000		inputhandle DWORD 0
 00001996 00000000		outputhandle DWORD 0
 0000199A 00000000		recordcount  DWORD 0
 0000199E 0000 0000		InputRecord _INPUT_RECORD <>
	   00000000 0000
	   0000 0000 0000
	   00000000
 000019B2 00000000		ConsoleMode DWORD 0
 000019B6 0078 001E		max_size COORD {120,30}
 000019BA 0000			color WORD 0
 000019BC 0000 0000 0000	timeCmp SYSTEMTIME <>
	   0000 0000 0000
	   0000 0000

 000019CC 45 6E 74 65 72	AskStartTime BYTE "Enter quiz open time. ", 0Dh, 0Ah, "Hours: ", 0, "Minutes: ", 0
	   20 71 75 69 7A
	   20 6F 70 65 6E
	   20 74 69 6D 65
	   2E 20 0D 0A 48
	   6F 75 72 73 3A
	   20 00 4D 69 6E
	   75 74 65 73 3A
	   20 00
 000019F6 45 6E 74 65 72	AskEndTime BYTE "Enter number of hours the quiz will be open (Answer sheet will be released after this time): ", 0
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 68 6F 75 72
	   73 20 74 68 65
	   20 71 75 69 7A
	   20 77 69 6C 6C
	   20 62 65 20 6F
	   70 65 6E 20 28
	   41 6E 73 77 65
	   72 20 73 68 65
	   65 74 20 77 69
	   6C 6C 20 62 65
	   20 72 65 6C 65
	   61 73 65 64 20
	   61 66 74 65 72
	   20 74 68 69 73
	   20 74 69 6D 65
	   29 3A 20 00
 00001A54  00000002 [		StartTimeFile WORD 2 DUP(?)
	    0000
	   ]
 00001A58  00000002 [		EndTimeFile WORD 2 DUP(?)
	    0000
	   ]
 00001A5C 49 6E 76 61 6C	StartTimeError BYTE "Invalid input for time. Try again.", 0Dh, 0Ah, 0
	   69 64 20 69 6E
	   70 75 74 20 66
	   6F 72 20 74 69
	   6D 65 2E 20 54
	   72 79 20 61 67
	   61 69 6E 2E 0D
	   0A 00
 00001A81 45 6E 74 65 72	msg1 byte "Enter number of sections (max:5) : ", 0
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 73 65 63 74
	   69 6F 6E 73 20
	   28 6D 61 78 3A
	   35 29 20 3A 20
	   00
 00001AA5 59 6F 75 20 65	msg1_support byte "You entered sections out of range (range:1-5). Please re-enter.", 0
	   6E 74 65 72 65
	   64 20 73 65 63
	   74 69 6F 6E 73
	   20 6F 75 74 20
	   6F 66 20 72 61
	   6E 67 65 20 28
	   72 61 6E 67 65
	   3A 31 2D 35 29
	   2E 20 50 6C 65
	   61 73 65 20 72
	   65 2D 65 6E 74
	   65 72 2E 00
 00001AE5 45 6E 74 65 72	msg2 byte "Enter number of questions per section (max:20) : ", 0
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 71 75 65 73
	   74 69 6F 6E 73
	   20 70 65 72 20
	   73 65 63 74 69
	   6F 6E 20 28 6D
	   61 78 3A 32 30
	   29 20 3A 20 00
 00001B17 59 6F 75 20 65	msg2_support byte "You entered the number out of range (range:1-20). Please re-enter.", 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 6E 75 6D 62
	   65 72 20 6F 75
	   74 20 6F 66 20
	   72 61 6E 67 65
	   20 28 72 61 6E
	   67 65 3A 31 2D
	   32 30 29 2E 20
	   50 6C 65 61 73
	   65 20 72 65 2D
	   65 6E 74 65 72
	   2E 00
 00001B5A 45 6E 74 65 72	msg3 byte "Enter number of minutes per section (range:1-20): ", 0
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 6D 69 6E 75
	   74 65 73 20 70
	   65 72 20 73 65
	   63 74 69 6F 6E
	   20 28 72 61 6E
	   67 65 3A 31 2D
	   32 30 29 3A 20
	   00
 00001B8D 45 6E 74 65 72	msg4 byte "Enter Roll No (8 character) : ", 0
	   20 52 6F 6C 6C
	   20 4E 6F 20 28
	   38 20 63 68 61
	   72 61 63 74 65
	   72 29 20 3A 20
	   00
 00001BAC 43 68 6F 6F 73	msg5 byte "Choose any option by entering the alphabet character of that option written before the options (Range: a-d).", 0Ah, "You will not be given second chance if you enter a character wrong or even out of range.", 0Ah, "GOOD LUCK", 0
	   65 20 61 6E 79
	   20 6F 70 74 69
	   6F 6E 20 62 79
	   20 65 6E 74 65
	   72 69 6E 67 20
	   74 68 65 20 61
	   6C 70 68 61 62
	   65 74 20 63 68
	   61 72 61 63 74
	   65 72 20 6F 66
	   20 74 68 61 74
	   20 6F 70 74 69
	   6F 6E 20 77 72
	   69 74 74 65 6E
	   20 62 65 66 6F
	   72 65 20 74 68
	   65 20 6F 70 74
	   69 6F 6E 73 20
	   28 52 61 6E 67
	   65 3A 20 61 2D
	   64 29 2E 0A 59
	   6F 75 20 77 69
	   6C 6C 20 6E 6F
	   74 20 62 65 20
	   67 69 76 65 6E
	   20 73 65 63 6F
	   6E 64 20 63 68
	   61 6E 63 65 20
	   69 66 20 79 6F
	   75 20 65 6E 74
	   65 72 20 61 20
	   63 68 61 72 61
	   63 74 65 72 20
	   77 72 6F 6E 67
	   20 6F 72 20 65
	   76 65 6E 20 6F
	   75 74 20 6F 66
	   20 72 61 6E 67
	   65 2E 0A 47 4F
	   4F 44 20 4C 55
	   43 4B 00
 00001C7C 44 6F 75 62 6C	msg6 byte "Double click the answer: ", 0
	   65 20 63 6C 69
	   63 6B 20 74 68
	   65 20 61 6E 73
	   77 65 72 3A 20
	   00
 00001C96 59 6F 75 72 20	Score_msg3 byte "Your score is : ", 0
	   73 63 6F 72 65
	   20 69 73 20 3A
	   20 00
 00001CA7 45 6E 74 65 72	enterQ byte "Enter Question ", 0
	   20 51 75 65 73
	   74 69 6F 6E 20
	   00
 00001CB7 45 6E 74 65 72	enterC byte "Enter Choice : ", 0
	   20 43 68 6F 69
	   63 65 20 3A 20
	   00
 00001CC7 45 6E 74 65 72	enterA byte "Enter an alphabet pointing the right answer (a/b/c/d) : ", 0
	   20 61 6E 20 61
	   6C 70 68 61 62
	   65 74 20 70 6F
	   69 6E 74 69 6E
	   67 20 74 68 65
	   20 72 69 67 68
	   74 20 61 6E 73
	   77 65 72 20 28
	   61 2F 62 2F 63
	   2F 64 29 20 3A
	   20 00
 00001D00 54 68 65 20 61	enterA_support byte "The alphabet is not in range. (Range:a,b,c,d). Please re-enter.", 0
	   6C 70 68 61 62
	   65 74 20 69 73
	   20 6E 6F 74 20
	   69 6E 20 72 61
	   6E 67 65 2E 20
	   28 52 61 6E 67
	   65 3A 61 2C 62
	   2C 63 2C 64 29
	   2E 20 50 6C 65
	   61 73 65 20 72
	   65 2D 65 6E 74
	   65 72 2E 00
 00001D40 00			enterA_flag Byte ?
 00001D41 41 6E 73 77 65	answerSheetLockedStr BYTE "Answer sheet is not available at this time.", 0
	   72 20 73 68 65
	   65 74 20 69 73
	   20 6E 6F 74 20
	   61 76 61 69 6C
	   61 62 6C 65 20
	   61 74 20 74 68
	   69 73 20 74 69
	   6D 65 2E 00

 00001D6D 00			score sbyte ?
 00001D6E  0000000A [		Roll byte 10 dup(0)
	    00
	   ]
 00001D78 00000000		totaltime dword ?
 00001D7C 00000000		currtime dword ?
 00001D80 00000000		timeleftmin dword ? ;time left
 00001D84 00000000		timeleftsec dword ? ;seconds left
 00001D88 00			numSections Byte ?
 00001D89 00			numQuestions Byte ?
 00001D8A  00000064 [		Question1 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 00001E49  00000064 [		Question2 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 00001F08  00000064 [		Question3 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 00001FC7  00000064 [		Question4 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 00002086  00000064 [		Question5 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 00002145  00000064 [		Question6 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 00002204  00000064 [		Question7 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 000022C3  00000064 [		Question8 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 00002382  00000064 [		Question9 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 00002441  00000064 [		Question10 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 00002500  00000064 [		Question11 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 000025BF  00000064 [		Question12 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 0000267E  00000064 [		Question13 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 0000273D  00000064 [		Question14 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 000027FC  00000064 [		Question15 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 000028BB  00000064 [		Question16 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 0000297A  00000064 [		Question17 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 00002A39  00000064 [		Question18 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 00002AF8  00000064 [		Question19 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000001 [
	    00
	   ]
 00002BB7  00000064 [		Question20 Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Ah, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0A
	   00000001 [
	    00
	   ]

				;This array will clean or reinitialize the array to use them on the second run.
 00002C76  00000064 [		Reinitializer Byte 100 DUP (0), 0Ah, 0Dh, 20 dup (0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Dh, 20 dup(0), 0Ah, 0Ah, 1 dup(0)
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0D
	   00000014 [
	    00
	   ] 0A 0A
	   00000001 [
	    00
	   ]

				;This "offarray" is a special array, it is storing the offset of all array so we can access all the above array by just adding 4 into this array
 00002D35 00001D8A R		offarray dword offset Question1, offset Question2, offset Question3, offset Question4, offset Question5, offset Question6, offset Question7, offset Question8, offset Question9, offset Question10, offset Question11, offset Question12, offset Question13, offset Question14, offset Question15, offset Question16, offset Question17, offset Question18, offset Question19, offset Question20
	   00001E49 R
	   00001F08 R
	   00001FC7 R
	   00002086 R
	   00002145 R
	   00002204 R
	   000022C3 R
	   00002382 R
	   00002441 R
	   00002500 R
	   000025BF R
	   0000267E R
	   0000273D R
	   000027FC R
	   000028BB R
	   0000297A R
	   00002A39 R
	   00002AF8 R
	   00002BB7 R

 00002D85 51 75 69 7A 46	filename BYTE "QuizFile.txt",0
	   69 6C 65 2E 74
	   78 74 00
 00002D92 00000000		filehandle DWORD ?

				;shadow array to know whats been generated and what not. indexes correspond to question numbers. any with value other than 0 has been generated
 00002D96  00000014 [		shadow byte 20 DUP(0)
	    00
	   ]
				;to format the choices
 00002DAA 2E 20 00		format byte ". ", 0

 00000000			.code

 00000000			QuizCodeTeacher PROC USES EAX ECX EDX EDI ESI
 00000005  E8 00000000 E		call ClrScr
 0000000A  B0 00			mov al, 0
 0000000C  BF 0000025E R		mov edi, offset quizcode
 00000011  B9 0000000A			mov ecx, 10
 00000016  F3/ AA			rep stosb
 00000018			quizcodeask:
 00000018  BA 000001E0 R		mov edx, offset quizcodeStr
 0000001D  E8 00000000 E		call WriteString
 00000022  BA 0000025E R		mov edx, offset quizcode
 00000027  B9 0000000A			mov ecx, 10
 0000002C  E8 00000000 E		call ReadString
 00000031  BA 0000025E R		mov edx, offset quizcode
 00000036  E8 00000000 E		call StrLength
 0000003B  83 F8 08			cmp eax, 8
 0000003E  74 0C			je quizcodecorrect
 00000040  BA 00000203 R		mov edx, offset quizcodeStr2
 00000045  E8 00000000 E		call WriteString
 0000004A  EB CC			jmp quizcodeask

 0000004C			quizcodecorrect:
 0000004C  8D 35 0000025E R		lea esi, quizcode
 00000052  8D 3D 00000268 R		lea edi, txtStr
 00000058  B9 00000008			mov ecx, 8
 0000005D  FC				cld
 0000005E  F3/ A4			rep movsb
 00000060  BA 00000268 R		mov edx, offset txtStr
 00000065  E8 00000000 E		call CreateOutputFile
 0000006A  A3 00002D92 R		mov filehandle, eax

					ret
 00000075			QuizCodeTeacher ENDP

 00000075			QuizCodeStudent PROC USES EAX ECX EDX ESI EDI
 0000007A  E8 00000000 E		call ClrScr

 0000007F			studentcodeask:
 0000007F  B0 00			mov al, 0
 00000081  BF 0000025E R		mov edi, offset quizcode
 00000086  B9 0000000A			mov ecx, 10
 0000008B  F3/ AA			rep stosb

 0000008D  BA 000001E0 R		mov edx, offset quizcodeStr
 00000092  E8 00000000 E		call WriteString
 00000097  BA 0000025E R		mov edx, offset quizcode
 0000009C  B9 0000000A			mov ecx, 10
 000000A1  E8 00000000 E		call ReadString
 000000A6  BA 0000025E R		mov edx, offset quizcode
 000000AB  E8 00000000 E		call StrLength
 000000B0  83 F8 08			cmp eax, 8
 000000B3  74 0C			je studentcodecorrect
 000000B5  BA 00000203 R		mov edx, offset quizcodeStr2
 000000BA  E8 00000000 E		call WriteString
 000000BF  EB BE			jmp studentcodeask

 000000C1			studentcodecorrect:
 000000C1  8D 35 0000025E R		lea esi, quizcode
 000000C7  8D 3D 00000268 R		lea edi, txtStr
 000000CD  B9 00000008			mov ecx, 8
 000000D2  FC				cld
 000000D3  F3/ A4			rep movsb
 000000D5  BA 00000268 R		mov edx, offset txtStr
 000000DA  E8 00000000 E		call OpenInputFile
 000000DF  83 F8 FF			cmp eax, 0FFFFFFFFh
 000000E2  74 07			je quizdoesnotexist
 000000E4  A3 00002D92 R		mov filehandle, eax
 000000E9  EB 0C			jmp _studentquizcontinue
 000000EB			quizdoesnotexist:
 000000EB  BA 0000023C R		mov edx, offset quizcodeStr3
 000000F0  E8 00000000 E		call WriteString
 000000F5  EB 88			jmp studentcodeask

 000000F7			_studentquizcontinue:
					ret
 000000FD			QuizCodeStudent ENDP

 000000FD			WriteNames PROC USES EAX EDX ECX		; requires an open file handle
 00000100  A1 00002D92 R		mov eax, filehandle
 00000105  B9 00000032			mov ecx, 50
 0000010A  BA 00000050 R		mov edx, offset TestName
 0000010F  E8 00000000 E		call WriteToFile

 00000114  A1 00002D92 R		mov eax, filehandle
 00000119  B9 00000064			mov ecx, 100
 0000011E  BA 00000096 R		mov edx, offset Section1Name
 00000123  E8 00000000 E		call WriteToFile

					ret
 0000012C			WriteNames ENDP

 0000012C			ReadNames PROC USES EAX EDX ECX
 0000012F  A1 00002D92 R		mov eax, filehandle
 00000134  B9 00000032			mov ecx, 50
 00000139  BA 00000050 R		mov edx, offset TestName
 0000013E  E8 00000000 E		call ReadFromFile

 00000143  A1 00002D92 R		mov eax, filehandle
 00000148  B9 00000064			mov ecx, 100
 0000014D  BA 00000096 R		mov edx, offset Section1Name
 00000152  E8 00000000 E		call ReadFromFile

					ret
 0000015B			ReadNames ENDP

 0000015B			AskForSectionNames PROC USES EAX ECX EDX EDI
 0000015F  E8 00000000 E		call ClrScr
 00000164  BA 00000000 R		mov edx, offset AskSectionName
 00000169  E8 00000000 E		call WriteString

 0000016E  BA 00000096 R		mov edx, offset Section1Name
 00000173  0F B6 0D			movzx ecx, numSections
	   00001D88 R

 0000017A				askSectionsLoop:
 0000017A  51					push ecx
 0000017B  B9 00000014				mov ecx, 20
 00000180  B0 00				mov al, 0
 00000182  8B FA				mov edi, edx
 00000184  FC					cld
 00000185  F3/ AA				rep stosb
 00000187  B9 00000013				mov ecx, 19
 0000018C  E8 00000000 E			call ReadString
 00000191  83 C2 14				add edx, 20
 00000194  59					pop ecx
 00000195  E2 E3				LOOP askSectionsLoop

 00000197  E8 00000000 E		call ClrScr
					ret
 000001A1			AskForSectionNames ENDP

				PrintInMiddle PROTO, stringAddr:DWORD, lengthStr:DWORD, lineNumber:BYTE
 000001A1			PrintInMiddle PROC USES EAX EDX stringAddr:DWORD, lengthStr:DWORD, lineNumber:Byte	; Requires the string to be printed, its length and the line number
																									; of the line you want the string to be printed on
 000001A6  E8 00000000 E		call GetMaxXY
 000001AB  D0 EA			shr dl, 1
 000001AD  8A 45 0C			mov al, BYTE PTR lengthStr
 000001B0  D0 E8			shr al, 1
 000001B2  2A D0			sub dl, al
 000001B4  8A 75 10			mov dh, lineNumber
 000001B7  E8 00000000 E		call GotoXY
 000001BC  8B 55 08			mov edx, stringAddr
 000001BF  E8 00000000 E		call WriteString
				;	call crlf
					
					ret
 000001CA			PrintInMiddle ENDP

 000001CA			DisplayTestInfo PROC USES EAX EBX EDX ECX ESI
 000001CF  E8 00000000 E		call ClrScr
 000001D4  BA 00000050 R		mov edx, offset TestName
 000001D9  E8 00000000 E		call StrLength
					INVOKE PrintInMiddle, Addr TestName, eax, 2
 000001EB  E8 00000000 E		call crlf
 000001F0  E8 00000000 E		call crlf

 000001F5  BA 00000082 R		mov edx, offset SectionStr
 000001FA  E8 00000000 E		call StrLength
					INVOKE PrintInMiddle, Addr SectionStr, eax, 4
 0000020C  E8 00000000 E		call crlf
 00000211  0F B6 0D			movzx ecx, numSections
	   00001D88 R
 00000218  BA 00000096 R		mov edx, offset Section1Name
 0000021D  B3 05			mov bl, 5

 0000021F			printSectionNames:
 0000021F  E8 00000000 E		call StrLength
 00000224  8B F0			mov esi, eax
					INVOKE PrintInMiddle, edx, esi, bl
 00000230  E8 00000000 E		call crlf
 00000235  FE C3			inc bl
 00000237  83 C2 14			add edx, 20
 0000023A  E2 E3			LOOP printSectionNames
 0000023C  E8 00000000 E		call crlf

 00000241  BA 00000107 R		mov edx, offset TimeStr
 00000246  E8 00000000 E		call StrLength
 0000024B  83 C0 0B			add eax, 11
 0000024E  80 C3 02			add bl, 2
 00000251  8B F0			mov esi, eax
					INVOKE PrintInMiddle, Addr Timestr, esi, bl
 00000261  A1 00001D78 R		mov eax, totaltime
 00000266  F6 25 00001D88 R		mul numSections
 0000026C  E8 00000000 E		call WriteDec
 00000271  BA 00000127 R		mov edx, offset	MinutesStr
 00000276  E8 00000000 E		call WriteString
 0000027B  E8 00000000 E		call crlf
 00000280  E8 00000000 E		call crlf
					
 00000285  E8 00000000 E		call WaitMsg
 0000028A  E8 00000000 E		call ClrScr
					ret
 00000295			DisplayTestInfo ENDP

 00000295			Randomizer PROC USES EAX EBX ECX
					;function used: x(index) = (2y+3)%size
 00000298  E8 00000000 E		call GetMseconds ;this gets milliseconds into eax. we will be using this as our y
 0000029D  C1 E0 02			shl eax, 2
 000002A0  83 C0 03			add eax, 3
 000002A3  33 D2			xor edx,edx ; extends the number as edx:eax so we can use divide (mov edx,0)
 000002A5  0F B6 1D			movzx ebx, numQuestions ;this is num of qs
	   00001D89 R
 000002AC  F7 F3			div ebx
 000002AE  8B CA			mov ecx, edx ; value of x
 000002B0  BB 00002D96 R		mov ebx, offset shadow
 000002B5  03 DA			add ebx, edx 
 000002B7  0F B6 03			movzx eax, byte ptr [ebx]
 000002BA  83 F8 00			cmp eax, 0
 000002BD  74 21			je newnumfound
									;in the case that we get an already used question number, we perform linear probing
 000002BF				finder:
 000002BF  83 C2 01				add edx, 1
 000002C2  8B C2				mov eax, edx
 000002C4  33 D2				xor edx, edx
 000002C6  0F B6 1D				movzx ebx, numQuestions
	   00001D89 R
 000002CD  F7 F3				div ebx
 000002CF  BB 00002D96 R			mov ebx, offset shadow
 000002D4  03 DA				add ebx, edx
 000002D6  0F B6 03				movzx eax,byte ptr [ebx]
 000002D9  83 F8 00				cmp eax, 0
 000002DC  74 02				je newnumfound
 000002DE  EB DF				jmp finder

 000002E0				newnumfound:
						;new index val is is edx
 000002E0  C6 82 00002D96 R			mov shadow[edx], 10
	   0A
 000002E7  8B C2				mov eax, edx
 000002E9  8B 14 85				mov edx, offarray[eax*4]  ;actual me ise return krna he
	   00002D35 R

				;offset returned in edx
				ret
 000002F4			Randomizer ENDP

 000002F4			ReadSectionQuestion PROC USES EAX ECX EDX		; requires an open input filehandle
 000002F7  A1 00002D92 R		mov eax, filehandle
 000002FC  BA 00001D88 R		mov edx, offset numSections
 00000301  B9 00000001			mov ecx, 1
 00000306  E8 00000000 E		call ReadFromFile
 0000030B  A1 00002D92 R		mov eax, filehandle
 00000310  BA 00001D89 R		mov edx, offset numQuestions
 00000315  B9 00000001			mov ecx, 1
 0000031A  E8 00000000 E		call ReadFromFile
 0000031F  A1 00002D92 R		mov eax, filehandle
 00000324  BA 00001D78 R		mov edx, offset totaltime
 00000329  B9 00000004			mov ecx, 4
 0000032E  E8 00000000 E		call ReadFromFile
 00000333  A1 00002D92 R		mov eax, filehandle
 00000338  BA 00001A54 R		mov edx, offset StartTimeFile
 0000033D  B9 00000004			mov ecx, 4
 00000342  E8 00000000 E		call ReadFromFile
 00000347  A1 00002D92 R		mov eax, filehandle
 0000034C  BA 00001A58 R		mov edx, offset EndTimeFile
 00000351  B9 00000004			mov ecx, 4
 00000356  E8 00000000 E		call ReadFromFile
 0000035B  A1 00002D92 R		mov eax, filehandle
 00000360  BA 00001804 R		mov edx, offset negativeByte
 00000365  B9 00000001			mov ecx, 1
 0000036A  E8 00000000 E		call ReadFromFile

 0000036F  66| 51			push cx
 00000371  66| 8B 0D			mov cx, StartTimeFile[2]			;;;;;;;;;;;; REMOVE
	   00001A56 R
 00000378  66| 8B 0D			mov cx, StartTimeFile[2]
	   00001A56 R
 0000037F  66| 59			pop cx

					ret
 00000385			ReadSectionQuestion ENDP

 00000385			ReadQuestions PROC USES EAX ECX EDX				; requires an open input filehandle (reads questions for one section, has to be called every section)
 00000388  B8 000000BF			mov eax, lengthof Question1
 0000038D  0F B6 0D			movzx ecx, numQuestions
	   00001D89 R
 00000394  F7 E1			mul ecx
 00000396  8B C8			mov ecx, eax
 00000398  A1 00002D92 R		mov eax, filehandle
 0000039D  8B 15 00002D35 R		mov edx, offarray
 000003A3  E8 00000000 E		call ReadFromFile

					ret
 000003AC			ReadQuestions ENDP

 000003AC			WriteQuestions PROC USES EAX EDX ECX			; requires an open output filehandle
 000003AF  B8 000000BF			mov eax, lengthof Question1
 000003B4  F6 25 00001D89 R		mul numQuestions
 000003BA  8B C8			mov ecx, eax
 000003BC  A1 00002D92 R		mov eax, filehandle
 000003C1  8B 15 00002D35 R		mov edx, offarray
 000003C7  E8 00000000 E		call WriteToFile
 000003CC  72 04			jc show_error_file
					ret
 000003D2			show_error_file:
 000003D2  E8 00000000 E		call WriteWindowsMsg
					ret
 000003DB			WriteQuestions ENDP

 000003DB			WriteSectionQuestion PROC USES EAX EDX ECX		; requires an open output filehandle (writes questions for one section, is called every section in MakeTest)
 000003DE  A1 00002D92 R		mov eax, filehandle
 000003E3  BA 00001D88 R		mov edx, offset numSections
 000003E8  B9 00000001			mov ecx, 1
 000003ED  E8 00000000 E		call WriteToFile
 000003F2  A1 00002D92 R		mov eax, filehandle
 000003F7  BA 00001D89 R		mov edx, offset numQuestions
 000003FC  B9 00000001			mov ecx, 1
 00000401  E8 00000000 E		call WriteToFile
 00000406  A1 00002D92 R		mov eax, filehandle
 0000040B  BA 00001D78 R		mov edx, offset totaltime
 00000410  B9 00000004			mov ecx, 4
 00000415  E8 00000000 E		call WriteToFile
 0000041A  A1 00002D92 R		mov eax, filehandle
 0000041F  BA 00001A54 R		mov edx, offset StartTimeFile
 00000424  B9 00000004			mov ecx, 4
 00000429  E8 00000000 E		call WriteToFile
 0000042E  A1 00002D92 R		mov eax, filehandle
 00000433  BA 00001A58 R		mov edx, offset EndTimeFile
 00000438  B9 00000004			mov ecx, 4
 0000043D  E8 00000000 E		call WriteToFile
 00000442  A1 00002D92 R		mov eax, filehandle
 00000447  BA 00001804 R		mov edx, offset negativeByte
 0000044C  B9 00000001			mov ecx, 1
 00000451  E8 00000000 E		call WriteToFile

 00000456  66| 51			push cx
 00000458  66| 8B 0D			mov cx, StartTimeFile[2]			;;;;;;;;;;;; REMOVE
	   00001A56 R
 0000045F  66| 8B 0D			mov cx, StartTimeFile[2]
	   00001A56 R
 00000466  66| 59			pop cx

					ret
 0000046C			WriteSectionQuestion ENDP

 0000046C			Reinitialize PROC USES ECX EBX ESI EDI

 00000470  0F B6 0D		movzx ecx, numQuestions
	   00001D89 R
 00000477  BB 00002D35 R	mov ebx, offset offarray
 0000047C			L1:
 0000047C  51				push ecx
 0000047D  FC				cld
 0000047E  B9 000000BF			mov ecx, lengthof Reinitializer
 00000483  8B 3B			mov edi, [ebx]
 00000485  BE 00002C76 R		mov esi, offset Reinitializer
 0000048A  F3/ A4			rep movsb
 0000048C  59				pop ecx
 0000048D  83 C3 04			add ebx, 4
 00000490  E2 EA		loop L1

				ret
 00000497			Reinitialize ENDP

 00000497			ChoiceLimiter PROC

 00000497  C6 05 00001D40 R		mov enterA_flag, 0
	   00
 0000049E  3C 61			cmp al, 'a'
 000004A0  74 13			jz quit
 000004A2  3C 62			cmp al, 'b'
 000004A4  74 0F			jz quit
 000004A6  3C 63			cmp al, 'c'
 000004A8  74 0B			jz quit
 000004AA  3C 64			cmp al, 'd'
 000004AC  74 07			jz quit
 000004AE  C6 05 00001D40 R	mov enterA_flag, 1
	   01

 000004B5			quit:
 000004B5  C3				ret
 000004B6			ChoiceLimiter ENDP

 000004B6			AskForTestName PROC USES EDX ECX
 000004B8  E8 00000000 E		call ClrScr
 000004BD  BA 0000002A R		mov edx, offset AskTestName
 000004C2  E8 00000000 E		call WriteString
 000004C7  BA 00000050 R		mov edx, offset TestName
 000004CC  B9 00000032			mov ecx, 50
 000004D1  E8 00000000 E		call ReadString

					ret
 000004D9			AskForTestName ENDP

 000004D9			AskStartEndTime PROC USES eax ebx ecx edx
 000004DD  E8 00000000 E		call clrscr

 000004E2			startLabel1:
 000004E2  BA 000019CC R		mov edx, offset AskStartTime
 000004E7  E8 00000000 E		call writestring
 000004EC  E8 00000000 E		call ReadDec
 000004F1  83 F8 18			cmp eax, 24
 000004F4  73 08			jae StartError1
 000004F6  66| A3			mov StartTimeFile, ax
	   00001A54 R
 000004FC  EB 0C			jmp startLabel2
 000004FE				StartError1:
 000004FE  BA 00001A5C R			mov edx, offset StartTimeError
 00000503  E8 00000000 E			call writestring
 00000508  EB D8				jmp startLabel1
 0000050A			startLabel2:
 0000050A  BA 000019CC R		mov edx, offset AskStartTime
 0000050F  83 C2 20			add edx, 32
 00000512  E8 00000000 E		call writestring
 00000517  E8 00000000 E		call ReadDec
 0000051C  83 F8 3C			cmp eax, 60
 0000051F  73 08			jae StartError2
 00000521  66| A3			mov StartTimeFile[2], ax
	   00001A56 R
 00000527  EB 11			jmp endLabel1
 00000529				StartError2:
 00000529  BA 00001A5C R			mov edx, offset StartTimeError
 0000052E  E8 00000000 E			call writestring
 00000533  EB D5				jmp startLabel2

 00000535  E8 00000000 E		call crlf
 0000053A			endLabel1:
 0000053A  BA 000019F6 R		mov edx, offset AskEndTime
 0000053F  E8 00000000 E		call writestring
 00000544  E8 00000000 E		call ReadDec
 00000549  83 F8 00			cmp eax, 0
 0000054C  74 36			je endError1
 0000054E  BB 00000018			mov ebx, 24
 00000553  66| 2B 1D			sub bx, StartTimeFile
	   00001A54 R
 0000055A  66| 2B D8			sub bx, ax
 0000055D  74 25			jz endError1
 0000055F  66| 8B 1D			mov bx, StartTimeFile
	   00001A54 R
 00000566  66| 89 1D			mov EndTimeFile, bx
	   00001A58 R
 0000056D  66| 01 05			add EndTimeFile, ax
	   00001A58 R
 00000574  66| 8B 1D			mov bx, StartTimeFile[2]
	   00001A56 R
 0000057B  66| 89 1D			mov EndTimeFile[2], bx
	   00001A5A R
 00000582  EB 0D			jmp _continueTime
 00000584				endError1:
 00000584  8D 15 00001A5C R			lea edx, StartTimeError
 0000058A  E8 00000000 E			call writestring
 0000058F  EB A9				jmp endLabel1

 00000591			_continueTime:
					ret
 00000596			AskStartEndTime ENDP

 00000596			AskNegativeMarking PROC USES EAX EDX
 00000598  E8 00000000 E		call clrscr
 0000059D			_negativeMarkLabel:
 0000059D  BA 000017A0 R		mov edx, offset negativeMarkingStr
 000005A2  E8 00000000 E		call WriteString
 000005A7  E8 00000000 E		call ReadChar
 000005AC  3C 79			cmp al, "y"
 000005AE  74 10			je _negativeMarkProceed
 000005B0  3C 6E			cmp al, "n"
 000005B2  74 0C			je _negativeMarkProceed
 000005B4  BA 000017CE R		mov edx, offset negativeMarkingError
 000005B9  E8 00000000 E		call WriteString
 000005BE  EB DD			jmp _negativeMarkLabel

 000005C0			_negativeMarkProceed:
 000005C0  A2 00001804 R		mov negativeByte, al

					ret
 000005C8			AskNegativeMarking ENDP

 000005C8			MakeTest PROC USES EAX EBX ECX EDX ESI
					LOCAL QuestionCount:BYTE			; for writing question number

 000005D3  E8 FFFFFEDE			call AskForTestName					; asking for the name of test
 000005D8			start:
 000005D8  BE 00000096 R		mov esi, offset Section1Name		; for writing the name of section the question will be put in
 000005DD  BA 00001A81 R		mov edx, offset msg1
 000005E2  E8 00000000 E		call WriteString		;you will be asked for number of sections
 000005E7  B8 00000000			mov eax, 0
 000005EC  E8 00000000 E		call ReadDec			;you will input
 000005F1  3C 00			cmp al, 0
 000005F3  74 04			je __notZero1
 000005F5  3C 05			cmp al, 5				;it will check the number of section with the max number of section
 000005F7  76 11			jbe _storesection			;if it is below or equal to max, it will proceed, otherwise, will be ask to re-enter again
 000005F9				__notZero1:
 000005F9  BA 00001AA5 R		mov edx, offset msg1_support
 000005FE  E8 00000000 E		call WriteString
 00000603  E8 00000000 E		call Crlf
 00000608  EB CE			jmp start				;after the telling the problem with your input, you will be moved to start.
					
 0000060A				_storesection:
 0000060A  A2 00001D88 R			mov numSections, al

 0000060F				_proceed:
 0000060F  BA 00001AE5 R			mov edx, offset msg2
 00000614  E8 00000000 E			call WriteString		;you will be asked for the number of questions
 00000619  B8 00000000				mov eax, 0
 0000061E  E8 00000000 E			call ReadDec			;you will input
 00000623  3C 00				cmp al, 0
 00000625  74 04				je __notZero2
 00000627  3C 14				cmp al, 20				;it will check the number of questions with the max number of question
 00000629  76 11				jbe _storequestions			;if it is below or equal to the max number, it will proceed, otherwise, will be ask to re-enter again
 0000062B					__notZero2:
 0000062B  BA 00001B17 R			mov edx, offset msg2_support
 00000630  E8 00000000 E			call WriteString
 00000635  E8 00000000 E			call Crlf
 0000063A  EB D3				jmp _proceed			;it will lead to enter the number of question.

 0000063C				_storequestions:
 0000063C  A2 00001D89 R			mov numQuestions, al

 00000641				_proceed1:
 00000641  BA 00001B5A R			mov edx, offset msg3
 00000646  E8 00000000 E			call WriteString			; you will be asked for the number of minutes per section
 0000064B  B8 00000000				mov eax, 0
 00000650  E8 00000000 E			call ReadDec
 00000655  3C 00				cmp al, 0
 00000657  74 04				je __notZero3
 00000659  3C 14				cmp al, 20
 0000065B  76 11				jbe _proceed2
 0000065D					__notZero3:
 0000065D  BA 00001B17 R			mov edx, offset msg2_support
 00000662  E8 00000000 E			call WriteString
 00000667  E8 00000000 E			call Crlf
 0000066C  EB D3				jmp _proceed1


 0000066E				_proceed2:
 0000066E  A3 00001D78 R			mov totaltime, eax
 00000673  E8 FFFFFE61				call AskStartEndTime		; asking for the quiz open/close timings
 00000678  E8 FFFFFF19				call AskNegativeMarking		; asking for enable/disable negative marking
 0000067D  E8 FFFFFD59				call WriteSectionQuestion	; Added by Umer to write the number of sections and questions to start of file
 00000682  E8 FFFFFAD4				call AskForSectionNames		; asking for name of sections
 00000687  E8 FFFFFA71				call WriteNames				; writing test name and section names to file

 0000068C  0F B6 0D			movzx ecx, numSections
	   00001D88 R
 00000693				_for1:
 00000693  C6 45 FF 01				mov QuestionCount, 1		; for writing question number
 00000697  BB 00002D35 R			mov ebx, offset offarray	;the offset of first question stored in ebx taken from the array of offsets, It will also bring to the first question for the second section
 0000069C  51					push ecx
 0000069D  0F B6 0D				movzx ecx, numQuestions
	   00001D89 R
 000006A4					_for2:
 000006A4  51						push ecx
							
 000006A5  E8 00000000 E				call clrscr				;The screen will be cleared for every new question
							
							INVOKE PrintInMiddle, Addr SectionStr2, lengthof SectionStr2-1, 0		; writing the name of section on top of the page
 000006B8  50						push eax
 000006B9  8B D6					mov edx, esi
 000006BB  E8 00000000 E				call StrLength
							INVOKE PrintInMiddle, esi, eax, 1
 000006C9  E8 00000000 E				call Crlf
 000006CE  58						pop eax
							
 000006CF  BA 00001CA7 R				mov edx, offset enterQ
 000006D4  E8 00000000 E				call WriteString		;You will be asked to enter the question

 000006D9  50						push eax
 000006DA  0F B6 45 FF					movzx eax, QuestionCount	; writing the question number
 000006DE  E8 00000000 E				call WriteDec
 000006E3  58						pop eax
 000006E4  FE 45 FF					inc QuestionCount
 000006E7  E8 00000000 E				call crlf

 000006EC  8B 13					mov edx, [ebx]
 000006EE  B9 00000062					mov ecx, 98				;the first 100 bytes are allocated for question
 000006F3  E8 00000000 E				call ReadString
							
 000006F8  BA 00001CB7 R				mov edx, offset enterC		;After entering the question, you will be asked to enter four choices
 000006FD  E8 00000000 E				call WriteString
 00000702  8B 13					mov edx, [ebx]
 00000704  83 C2 66					add edx, 102			;Since everything related to the question is getting stored in a single array, we formatted those array with a pattern, after 100 bytes, there are two for nextline '\n' feed and return carriage '\r' so that cursor moves to te beginning of next line
 00000707  B9 00000013					mov ecx, 19				;20 bytes allocated for each choice
 0000070C  E8 00000000 E				call ReadString
							
 00000711  BA 00001CB7 R				mov edx, offset enterC
 00000716  E8 00000000 E				call WriteString			;Choice # 2
 0000071B  8B 13					mov edx, [ebx]
 0000071D  83 C2 7C					add edx, 124				;offset of the position allocated for choice 2
 00000720  B9 00000013					mov ecx, 19
 00000725  E8 00000000 E				call ReadString
							
 0000072A  BA 00001CB7 R				mov edx, offset enterC		;Choice # 3
 0000072F  E8 00000000 E				call WriteString
 00000734  8B 13					mov edx, [ebx]
 00000736  81 C2 00000092				add edx, 146
 0000073C  B9 00000013					mov ecx, 19
 00000741  E8 00000000 E				call ReadString
							
 00000746  BA 00001CB7 R				mov edx, offset enterC		;Choice # 4
 0000074B  E8 00000000 E				call WriteString
 00000750  8B 13					mov edx, [ebx]
 00000752  81 C2 000000A8				add edx, 168
 00000758  B9 00000013					mov ecx, 19
 0000075D  E8 00000000 E				call ReadString
							
 00000762					AnswerChoice:
 00000762  BA 00001CC7 R				mov edx, offset enterA		;prompt
 00000767  E8 00000000 E				call WriteString
 0000076C  8B 13					mov edx, [ebx]
 0000076E  81 C2 000000BE				add edx, 190			;Answer's byte
 00000774  B8 00000000					mov eax, 0
 00000779  E8 00000000 E				call ReadChar		;Since ReadChar doesn't echo the read character to the console
 0000077E  E8 00000000 E				call WriteChar		;It will be good to write that read character in the console :)
 00000783  E8 FFFFFD0F					call ChoiceLimiter
 00000788  80 3D 00001D40 R				cmp enterA_flag, 1
	   01
 0000078F  74 09					jz _dothis
 00000791  88 02					mov [edx], al
 00000793  E8 00000000 E				call Crlf
 00000798  EB 16					jmp _proceed3
 0000079A						_dothis:
 0000079A  E8 00000000 E					call crlf
 0000079F  BA 00001D00 R					mov edx, offset enterA_support
 000007A4  E8 00000000 E					call WriteString
 000007A9  E8 00000000 E					call crlf
 000007AE  EB B2						jmp AnswerChoice

 000007B0						_proceed3:
 000007B0  83 C3 04						add ebx, 4		;The offset for the next question array
 000007B3  B9 00000000						mov ecx, 0		;I like to clear the register before working with those, co-op with me
 000007B8  59							pop ecx
 000007B9  49							dec ecx			;The loop incrementer is popped and decremented, there's a reason for the decrement, in the next line comment
						
 000007BA  0F 85 FFFFFEE4			jnz _for2		;The ideal and the first idea was to loop this process using loop, but loop is used for short jumps, so I have to use jnz
						
 000007C0  E8 FFFFFBE7				call WriteQuestions		; Added by Umer to write questions to file for this section
						
 000007C5  E8 FFFFFCA2				call Reinitialize		;This instruction will clean the array, put your filing work before this
 000007CA  83 C6 14				add esi, 20
 000007CD  59					pop ecx
 000007CE  49					dec ecx
 000007CF  0F 85 FFFFFEBE		jnz _for1			;same reason for this jnz

				;	mov ecx, lengthof Question1
				;	mov esi, offset Question1
				;	mov edi, type Question1
				;	call DumpMem
				;
				;	mov ecx, lengthof Question2
				;	mov esi, offset Question2
				;	mov edi, type Question2
				;	call DumpMem

				ret
 000007DC			MakeTest ENDP

 000007DC			DisplaySectionInfo PROC USES EDX EAX
 000007DE  E8 00000000 E		call ClrScr
 000007E3  BA 0000008E R		mov edx, offset SectionStr2
 000007E8  E8 00000000 E		call StrLength
					INVOKE PrintInMiddle, Addr SectionStr2, eax, 4
 000007FA  E8 00000000 E		call crlf

 000007FF  8B D6			mov edx, esi
 00000801  E8 00000000 E		call StrLength
					INVOKE PrintInMiddle, edx, eax, 5
 0000080F  E8 00000000 E		call crlf

 00000814  BA 00000114 R		mov edx, offset TimeStr2
 00000819  E8 00000000 E		call StrLength
 0000081E  83 C0 0A			add eax, 10
					INVOKE PrintInMiddle, Addr TimeStr2, eax, 7
 0000082E  A1 00001D78 R		mov eax, totaltime
 00000833  E8 00000000 E		call WriteDec
 00000838  BA 00000127 R		mov edx, offset MinutesStr
 0000083D  E8 00000000 E		call WriteString
 00000842  E8 00000000 E		call Crlf
 00000847  E8 00000000 E		call Crlf
 0000084C  E8 00000000 E		call Crlf

 00000851  E8 00000000 E		call WaitMsg
					ret
 00000859			DisplaySectionInfo ENDP

 00000859			TimeChecker PROC USES EAX EBX ECX EDX 
					LOCAL timespent:DWORD, minutes:DWORD, seconds:DWORD
 00000863  B8 00000000		mov eax,0
 00000868  E8 00000000 E	call getMseconds
 0000086D  89 45 FC		mov timespent,eax
 00000870  8B 5D FC		mov ebx, timespent
 00000873  2B 1D 00001D7C R	sub ebx, currtime
 00000879  8B 4D FC		mov ecx, timespent
 0000087C  89 0D 00001D7C R	mov currtime, ecx
 00000882  8B C3		mov eax,ebx
 00000884  33 D2		xor edx,edx
 00000886  B9 000003E8		mov ecx,1000
 0000088B  F7 F1		div ecx ;turned milliseconds into seconds
 0000088D  89 45 F4		mov seconds, eax
 00000890  8B 45 F4		mov eax, seconds
 00000893  33 D2		xor edx,edx
 00000895  B9 0000003C		mov ecx,60
 0000089A  F7 F1		div ecx ;turned seconds into minutes
 0000089C  89 45 F8		mov minutes, eax
 0000089F  89 55 F4		mov seconds, edx
 000008A2  8B 1D 00001D84 R	mov ebx, timeleftsec
 000008A8  B9 0000003C		mov ecx, 60
 000008AD  2B CB		sub ecx, ebx
 000008AF  03 4D F4		add ecx, seconds

 000008B2  83 F9 3C		cmp ecx, 60 ;maybe seconds are over 60 indicating a minute just by sum of seconds
 000008B5  72 16		jb notgreat
 000008B7  FF 45 F8			inc minutes
 000008BA  83 E9 3C			sub ecx, 60
					
 000008BD  8B 1D 00001D80 R		mov ebx, timeleftmin
 000008C3  3B 5D F8			cmp ebx, minutes
 000008C6  73 05			jae notgreat
 000008C8  B9 0000003C			mov ecx,60
					
 000008CD			notgreat:
 000008CD  BB 0000003C			mov ebx, 60
 000008D2  2B D9			sub ebx, ecx
 000008D4  89 1D 00001D84 R		mov timeleftsec,ebx

 000008DA  83 FB 3C			cmp ebx, 60
 000008DD  72 0C			jb returner
 000008DF  83 EB 3C				sub ebx, 60
 000008E2  89 1D 00001D84 R			mov timeleftsec,ebx
 000008E8  FF 4D F8				dec minutes


 000008EB			returner:
 000008EB  8B 1D 00001D80 R	mov ebx, timeleftmin
 000008F1  3B 5D F8		cmp ebx, minutes
 000008F4  77 0C		ja subtractallowed
 000008F6  C7 05 00001D80 R	mov timeleftmin,0
	   00000000
 00000900  EB 09		jmp returning

 00000902			subtractallowed:
 00000902  2B 5D F8			sub ebx, minutes
 00000905  89 1D 00001D80 R		mov timeleftmin,ebx

 0000090B			returning:
				ret
 00000911			TimeChecker ENDP

 00000911			TakeTest PROC USES EAX EBX ECX EDX ESI EDI
					LOCAL QuestionNumber:BYTE

 0000091D  E8 00000000 E	call clrscr
 00000922  BE 00000096 R	mov esi, offset Section1Name
 00000927			askrollagain:
 00000927  BA 00001B8D R	mov edx, offset msg4				; asking for roll number
 0000092C  E8 00000000 E	call WriteString
 00000931  BA 00001D6E R	mov edx, offset Roll		
 00000936  B9 00000009		mov ecx, 9
 0000093B  E8 00000000 E	call ReadString
 00000940  83 F8 08		cmp eax, 8
 00000943  75 E2		jne askrollagain
 00000945  E8 00000000 E	call clrscr
 0000094A  E8 FFFFF9A5		call ReadSectionQuestion
 0000094F  E8 FFFFF7D8		call ReadNames

				INVOKE GetSystemTime, Addr timeCmp	; getting current time in UTC format
 0000095E  66| 83 05		add timeCmp.wHour, 5				; making it to local Paskitan Time (UTC +5)
	   000019C4 R 05
 00000966  66| 52		push dx								; checking if test is being taken at correct time

 00000968  66| 8B 15		mov dx, timeCmp.wHour
	   000019C4 R
 0000096F  66| 3B 15		cmp dx, StartTimeFile
	   00001A54 R
 00000976  72 24		jb wrongTime						; if current time is before starting time of quiz, error
				;cmp dx, EndTimeFile
				;ja wrongTime						; if current time is after ending time of quiz, error

 00000978  66| 8B 15		mov dx, timeCmp.wHour
	   000019C4 R
 0000097F  66| 3B 15		cmp dx, StartTimeFile
	   00001A54 R
 00000986  75 12		jne _endMinuteCheck
 00000988  66| 8B 15		mov dx, timeCmp.wMinute				; comparing minutes (basically same as the hour)
	   000019C6 R
 0000098F  66| 3B 15		cmp dx, StartTimeFile[2]
	   00001A56 R
 00000996  72 04		jb wrongTime
 00000998  EB 1B		jmp _timeCorrect

 0000099A			_endMinuteCheck:
					;mov dx, timeCmp.wMinute
					;cmp dx, EndTimeFile[2]
					;ja wrongTime
 0000099A  EB 19			jmp _timeCorrect

 0000099C			wrongTime:							; display error if attempting quiz at wrong time and returning back to main
 0000099C  66| 5A			pop dx
 0000099E  BA 0000176D R		mov edx, offset wrongTimeStr
 000009A3  8B DA			mov ebx, edx
 000009A5  83 C3 24			add ebx, 36
 000009A8  E8 00000000 E		call MsgBox
					ret
					
 000009B5			_timeCorrect:						; continuing if within the defined time
 000009B5  66| 5A		pop dx
 000009B7  E8 FFFFF80E		call DisplayTestInfo

 000009BC  C6 05 00001D6D R	mov score, 0
	   00
 000009C3  0F B6 0D		movzx ecx, numSections
	   00001D88 R
 000009CA			_QuestionLoop1:
 000009CA  E8 FFFFF9B6			call ReadQuestions
					;Enter the file reading part here, we will be getting all questions of a single section in a discussed format in the arrays.
 000009CF  E8 FFFFFE08			call DisplaySectionInfo

 000009D4  50				push eax				; getting the current time for the timer
 000009D5  B8 00000000			mov eax,0
 000009DA  E8 00000000 E		call getMseconds
 000009DF  A3 00001D7C R		mov currtime,eax
 000009E4  FF 35 00001D78 R		push totaltime
 000009EA  8F 05 00001D80 R		pop timeleftmin
 000009F0  C7 05 00001D84 R		mov timeleftsec, 0
	   00000000
 000009FA  58				pop eax
					
 000009FB  C6 45 FF 01			mov QuestionNumber, 1
 000009FF  C6 05 0000176C R		mov timeStatus, 0
	   00
 00000A06  51				push ecx
 00000A07  0F B6 0D			movzx ecx, numQuestions
	   00001D89 R
 00000A0E				_QuestionLoop2:
 00000A0E  E8 00000000 E			call ClrScr
 00000A13  51					push ecx
						
						INVOKE PrintInMiddle, Addr SectionStr2, lengthof SectionStr2-1, 0		; writing the name of section on top of the page
 00000A22  50					push eax
 00000A23  8B D6				mov edx, esi
 00000A25  E8 00000000 E			call StrLength
						INVOKE PrintInMiddle, esi, eax, 1

 00000A33  50					push eax
 00000A34  B8 0000004F				mov eax, white+(red*16)
 00000A39  E8 00000000 E			call SetTextColor
 00000A3E  58					pop eax
 00000A3F  BA 0000011B R			mov edx, offset TimeStr3												; writing the time remaining for this section
 00000A44  E8 00000000 E			call StrLength
 00000A49  83 C0 05				add eax, 5
						INVOKE PrintInMiddle, Addr TimeStr3, eax, 3
 00000A59  A1 00001D80 R			mov eax, timeleftmin
 00000A5E  E8 00000000 E			call writedec
 00000A63  B0 3A				mov al, ':'
 00000A65  E8 00000000 E			call writechar
 00000A6A  83 3D 00001D84 R			cmp timeleftsec, 10
	   0A
 00000A71  73 0A				jae _noZeroAdded
 00000A73  B8 00000000				mov eax, 0
 00000A78  E8 00000000 E			call WriteDec
 00000A7D				_NoZeroAdded:
 00000A7D  A1 00001D84 R			mov eax, timeleftsec
 00000A82  E8 00000000 E			call writedec
 00000A87  E8 00000000 E			call Crlf
 00000A8C  E8 00000000 E			call Crlf
 00000A91  58					pop eax
 00000A92  50					push eax
 00000A93  B8 0000000F				mov eax, white+(black*16)
 00000A98  E8 00000000 E			call SetTextColor
 00000A9D  58					pop eax

 00000A9E  BA 000000FA R			mov edx, offset QuestionNoStr
 00000AA3  E8 00000000 E			call WriteString		;You will be asked to enter the question

 00000AA8  50					push eax
 00000AA9  0F B6 45 FF				movzx eax, QuestionNumber	; writing the question number
 00000AAD  E8 00000000 E			call WriteDec
 00000AB2  B0 3A				mov al, ":"
 00000AB4  E8 00000000 E			call WriteChar
 00000AB9  B0 20				mov al, " "
 00000ABB  E8 00000000 E			call WriteChar
 00000AC0  58					pop eax
 00000AC1  FE 45 FF				inc QuestionNumber

				;		mov edx, offset msg5
				;		call WriteString
				;		call Crlf
 00000AC4  E8 FFFFF7CC				call Randomizer		;called the randomizer (made by Ali) which will return the offset of a question in edx
 00000AC9  8B DA				mov ebx, edx
 00000ACB  E8 00000000 E			call WriteString	;which will then print.
 00000AD0  E8 00000000 E			call Crlf		;idk for sure, that the array will have the \n char, that's why adding this, remove it if looks out of format
 00000AD5  E8 00000000 E			call crlf
						
 00000ADA  B0 61				mov al, 'a'
 00000ADC  E8 00000000 E			call WriteChar
 00000AE1  BA 00002DAA R			mov edx, offset format
 00000AE6  E8 00000000 E			call WriteString		;so that it will look like this:	a. choice is here. \n b. Choice is here and so on...
 00000AEB  8B D3				mov edx, ebx
 00000AED  83 C2 66				add edx, 102
 00000AF0  E8 00000000 E			call WriteString	;Write Choice # 1
 00000AF5  E8 00000000 E			call crlf

 00000AFA  FE C0				inc al
 00000AFC  E8 00000000 E			call WriteChar
 00000B01  BA 00002DAA R			mov edx, offset format
 00000B06  E8 00000000 E			call WriteString
 00000B0B  8B D3				mov edx, ebx
 00000B0D  83 C2 7C				add edx, 124
 00000B10  E8 00000000 E			call WriteString	;	Write Choice # 2
 00000B15  E8 00000000 E			call Crlf

 00000B1A  FE C0				inc al
 00000B1C  E8 00000000 E			call WriteChar
 00000B21  BA 00002DAA R			mov edx, offset format
 00000B26  E8 00000000 E			call WriteString
 00000B2B  8B D3				mov edx, ebx
 00000B2D  81 C2 00000092			add edx, 146
 00000B33  E8 00000000 E			call WriteString	;Write Choice # 3
 00000B38  E8 00000000 E			call Crlf

 00000B3D  FE C0				inc al
 00000B3F  E8 00000000 E			call WriteChar
 00000B44  BA 00002DAA R			mov edx, offset format
 00000B49  E8 00000000 E			call WriteString
 00000B4E  8B D3				mov edx, ebx
 00000B50  81 C2 000000A8			add edx, 168
 00000B56  E8 00000000 E			call WriteString	;Write Choice # 4
 00000B5B  E8 00000000 E			call Crlf

 00000B60  E8 00000000 E			call Crlf
 00000B65				AnswerChoice2:
 00000B65  BA 00001C7C R			mov edx, offset msg6
 00000B6A  E8 00000000 E			call WriteString		;You will be asked to enter the answer
 00000B6F  B8 00000000				mov eax, 0
 00000B74  E8 00000000 E			call crlf
 00000B79  E8 0000046C				call Choice_Selection_Menu
						
 00000B7E  E8 000005B5				call Get_Student_Input ; returns in al (mouse implementation)

 00000B83  E8 FFFFF90F				call ChoiceLimiter
 00000B88  80 3D 00001D40 R			cmp enterA_flag, 1
	   01
 00000B8F  74 07				jz _dothis2
 00000B91  E8 00000000 E			call Crlf
 00000B96  EB 16				jmp _AnswerCompare
 00000B98					_dothis2:
 00000B98  E8 00000000 E				call crlf
 00000B9D  BA 00001D00 R				mov edx, offset enterA_support
 00000BA2  E8 00000000 E				call WriteString
 00000BA7  E8 00000000 E				call crlf
 00000BAC  EB B7					jmp AnswerChoice2
					
 00000BAE				_AnswerCompare:
 00000BAE  8B D3				mov edx, ebx
 00000BB0  81 C2 000000BE			add edx, 190
 00000BB6  3A 02				cmp al, [edx]		;The character you read will be compared to the last byte of Question array
 00000BB8  75 09				jne scoredec		;if not correct, go to score decrementer label
 00000BBA  80 05 00001D6D R			add score, 2		;if answer is correct, score will be incremented by 2
	   02
 00000BC1  EB 0F				jmp here

 00000BC3					scoredec:
 00000BC3  80 3D 00001804 R				cmp negativeByte, "n"
	   6E
 00000BCA  74 06					je here
 00000BCC  FE 0D 00001D6D R				dec score

 00000BD2					here:
 00000BD2  50						push eax
 00000BD3  51						push ecx
 00000BD4  E8 FFFFFC80					call timechecker			; checking the remaining time
 00000BD9  8B 0D 00001D80 R				mov ecx, timeleftmin
 00000BDF  A1 00001D84 R				mov eax, timeleftsec
 00000BE4  03 C1					add eax, ecx
 00000BE6  83 F8 00					cmp eax, 0
 00000BE9  74 0C					je _NoTimeLeft
 00000BEB  59						pop ecx
 00000BEC  58						pop eax

 00000BED  59						pop ecx
 00000BEE  49						dec ecx
 00000BEF  0F 85 FFFFFE19		jnz _QuestionLoop2
 00000BF5  EB 2B			jmp _timeleft

 00000BF7			_NoTimeLeft:
 00000BF7  59				pop ecx
 00000BF8  58				pop eax
 00000BF9  59				pop ecx
 00000BFA  E8 00000000 E		call clrscr
 00000BFF  50				push eax
 00000C00  BA 00000130 R		mov edx, offset timeOverStr
 00000C05  E8 00000000 E		call StrLength
					INVOKE PrintInMiddle, Addr timeOverStr, eax, 4
 00000C17  B8 000007D0			mov eax, 2000
 00000C1C  E8 00000000 E		call Delay
 00000C21  58				pop eax

 00000C22			_timeleft:	
 00000C22  83 C6 14			add esi, 20
 00000C25  51				push ecx
 00000C26  BF 00002D96 R		mov edi, offset shadow
 00000C2B  B9 00000014			mov ecx, 20
 00000C30  B0 00			mov al, 0
 00000C32  FC				cld
 00000C33  F3/ AA			rep stosb
 00000C35  59				pop ecx

 00000C36  59				pop ecx
 00000C37  49				dec ecx
 00000C38  0F 85 FFFFFD8C	jnz _QuestionLoop1

 00000C3E  E8 00000000 E	call clrscr
 00000C43  BA 00001C96 R	mov edx, offset score_msg3
 00000C48  E8 00000000 E	call WriteString			;Your score is : score
 00000C4D  80 3D 00001D6D R	cmp score, 0
	   00
 00000C54  7D 07		jge _positive
 00000C56  C6 05 00001D6D R	mov score, 0
	   00

 00000C5D			_positive:
 00000C5D  0F B6 05		movzx eax, score
	   00001D6D R
 00000C64  E8 00000000 E	call WriteDec
 00000C69  E8 00000000 E	call crlf
 00000C6E  E8 00000000 E	call crlf

 00000C73  0F B6 05		movzx eax, numSections		; storing total marks in t_marks
	   00001D88 R
 00000C7A  F6 25 00001D89 R	mul numQuestions
 00000C80  51			push ecx
 00000C81  B9 00000002		mov ecx, 2
 00000C86  F7 E1		mul ecx
 00000C88  59			pop ecx
 00000C89  66| A3		mov t_marks, ax
	   00001693 R

 00000C8F  E8 00000552		call RecordFiler
 00000C94  E8 00000000 E	call WaitMsg

					; GIVING OPTION TO CHECK ANSWER SHEET
 00000C99  A1 00002D92 R		mov eax, filehandle
 00000C9E  E8 00000000 E		call CloseFile
 00000CA3  E8 00000008			call CheckAnswerSheet

				ret
 00000CB0			TakeTest ENDP

 00000CB0			CheckAnswerSheet PROC						; checking if student is allowed to access answer sheet at this point
 00000CB0  E8 00000000 E		call clrscr
 00000CB5  E8 000002F1			call Student_Menu_2
 00000CBA			_checkAnswersLoop:
 00000CBA  E8 0000037E			call Get_Initial_Choice

 00000CBF  83 F8 01			cmp eax, 1
 00000CC2  0F 85 000000FC		jne _gotomain
					INVOKE GetSystemTime, Addr timeCmp
 00000CD2  66| 83 05			add timeCmp.wHour, 5
	   000019C4 R 05
 00000CDA  66| 8B 15			mov dx, EndTimeFile
	   00001A58 R
 00000CE1  66| 39 15			cmp timeCmp.wHour, dx
	   000019C4 R
 00000CE8  0F 82 000000BF		jb _notAllowedYet
 00000CEE  77 14			ja _seeAnswerSheet
 00000CF0  66| 8B 15			mov dx, EndTimeFile[2]
	   00001A5A R
 00000CF7  66| 39 15			cmp timeCmp.wMinute, dx
	   000019C6 R
 00000CFE  0F 82 000000A9		jb _notAllowedYet

 00000D04			_seeAnswerSheet:
 00000D04  BA 00000268 R		mov edx, offset txtStr
 00000D09  E8 00000000 E		call OpenInputFile
 00000D0E  A3 00002D92 R		mov filehandle, eax
 00000D13  E8 FFFFF5DC			call ReadSectionQuestion
 00000D18  A1 00002D92 R		mov eax, filehandle
 00000D1D  E8 FFFFF40A			call ReadNames
 00000D22  0F B6 0D			movzx ecx, numSections
	   00001D88 R
 00000D29  BE 00000096 R		mov esi, offset Section1Name

 00000D2E			AnswerSheetLoop:
 00000D2E  E8 00000000 E		call clrscr
					INVOKE PrintInMiddle, Addr SectionStr2, lengthof SectionStr2-1, 0		; writing the name of section on top of the page
 00000D41  8B D6			mov edx, esi
 00000D43  E8 00000000 E		call StrLength
					INVOKE PrintInMiddle, esi, eax, 1
 00000D51  E8 00000000 E		call crlf

 00000D56  E8 FFFFF62A			call ReadQuestions		; reading questions for each section from file
 00000D5B  51				push ecx
 00000D5C  0F B6 0D			movzx ecx, numQuestions
	   00001D89 R
 00000D63  BB 00000000			mov ebx, 0

 00000D68				AnswerSheetLoop2:
 00000D68  E8 00000000 E			call crlf
 00000D6D  8A C3				mov al, bl
 00000D6F  FE C0				inc al
 00000D71  E8 00000000 E			call WriteDec
 00000D76  B0 2E				mov al, "."
 00000D78  E8 00000000 E			call WriteChar
 00000D7D  B0 20				mov al, " "
 00000D7F  E8 00000000 E			call WriteChar
 00000D84  8B 3C 9D				mov edi, offarray[ebx*4]
	   00002D35 R
 00000D8B  81 C7 000000BE			add edi, 190
 00000D91  8A 07				mov al, [edi]
 00000D93  E8 00000000 E			call WriteChar

 00000D98  43					inc ebx
 00000D99  E2 CD				LOOP AnswerSheetLoop2

 00000D9B  59				pop ecx
 00000D9C  E8 00000000 E		call crlf
 00000DA1  E8 00000000 E		call WaitMsg
 00000DA6  83 C6 14			add esi, 20
 00000DA9  E2 83			LOOP AnswerSheetloop
 00000DAB  EB 17			jmp _gotomain

 00000DAD			_notAllowedYet:
 00000DAD  BA 00001D41 R		mov edx, offset answerSheetLockedStr
 00000DB2  BB 0000176D R		mov ebx, offset wrongTimeStr
 00000DB7  83 C3 24			add ebx, 36
 00000DBA  E8 00000000 E		call MsgBox
 00000DBF  E9 FFFFFEF6			jmp _checkAnswersLoop

 00000DC4			_gotomain:
 00000DC4  C3				ret
 00000DC5			CheckAnswerSheet ENDP

 00000DC5			Student_Teacher_Colour PROC USES EAX ECX ESI
 00000DC8  B9 000000F4			mov ecx, 244
 00000DCD  BE 00000275 R		mov esi, offset StudentTeacherMenuPrint
 00000DD2  FC				cld
 00000DD3				colourloop1:
 00000DD3  AC					lodsb
 00000DD4  E8 00000000 E			call WriteChar
 00000DD9  E2 F8				LOOP colourloop1

 00000DDB  B9 00000015			mov ecx, 21
 00000DE0			outercolourloop:
 00000DE0  51				push ecx
 00000DE1  B8 00000009			mov eax, lightblue+(black*16)
 00000DE6  E8 00000000 E		call SetTextColor
 00000DEB  B9 0000003C			mov ecx, 60
 00000DF0				colourloop2:
 00000DF0  AC					lodsb
 00000DF1  E8 00000000 E			call WriteChar
 00000DF6  E2 F8				LOOP colourloop2

 00000DF8  B8 0000000F			mov eax, white+(black*16)
 00000DFD  E8 00000000 E		call SetTextColor
 00000E02  AC				lodsb
 00000E03  E8 00000000 E		call WriteChar

 00000E08  B8 0000000C			mov eax, lightred+(black*16)
 00000E0D  E8 00000000 E		call SetTextColor
 00000E12  B9 0000003D			mov ecx, 61
 00000E17				colourloop3:
 00000E17  AC					lodsb
 00000E18  E8 00000000 E			call WriteChar
 00000E1D  E2 F8				LOOP colourloop3
 00000E1F  59				pop ecx
 00000E20  E2 BE			LOOP outercolourloop

 00000E22  B8 0000000F			mov eax, white+(black*16)
 00000E27  E8 00000000 E		call SetTextColor
 00000E2C  B9 000000F4			mov ecx, 244
 00000E31				colourloop4:
 00000E31  AC					lodsb
 00000E32  E8 00000000 E			call WriteChar
 00000E37  E2 F8				LOOP colourloop4

					ret
 00000E3D			Student_Teacher_Colour ENDP

 00000E3D			Teacher_Menu_Colour PROC USES EAX ECX ESI
 00000E40  B9 000000F4			mov ecx, 244
 00000E45  BE 00000275 R		mov esi, offset StudentTeacherMenuPrint
 00000E4A  FC				cld
 00000E4B				colourloop11:
 00000E4B  AC					lodsb
 00000E4C  E8 00000000 E			call WriteChar
 00000E51  E2 F8				LOOP colourloop11

 00000E53  B9 00000015			mov ecx, 21
 00000E58			outercolourloop1:
 00000E58  51				push ecx
 00000E59  B8 0000000D			mov eax, lightmagenta+(black*16)
 00000E5E  E8 00000000 E		call SetTextColor
 00000E63  B9 0000003C			mov ecx, 60
 00000E68				colourloop22:
 00000E68  AC					lodsb
 00000E69  E8 00000000 E			call WriteChar
 00000E6E  E2 F8				LOOP colourloop22

 00000E70  B8 0000000F			mov eax, white+(black*16)
 00000E75  E8 00000000 E		call SetTextColor
 00000E7A  AC				lodsb
 00000E7B  E8 00000000 E		call WriteChar

 00000E80  B8 0000000A			mov eax, lightgreen+(black*16)
 00000E85  E8 00000000 E		call SetTextColor
 00000E8A  B9 0000003D			mov ecx, 61
 00000E8F				colourloop33:
 00000E8F  AC					lodsb
 00000E90  E8 00000000 E			call WriteChar
 00000E95  E2 F8				LOOP colourloop33
 00000E97  59				pop ecx
 00000E98  E2 BE			LOOP outercolourloop1

 00000E9A  B8 0000000F			mov eax, white+(black*16)
 00000E9F  E8 00000000 E		call SetTextColor
 00000EA4  B9 000000F4			mov ecx, 244
 00000EA9				colourloop44:
 00000EA9  AC					lodsb
 00000EAA  E8 00000000 E			call WriteChar
 00000EAF  E2 F8				LOOP colourloop44

					ret
 00000EB5			Teacher_Menu_Colour ENDP

 00000EB5			Student_Teacher_Menu PROC USES EAX EDX ECX
					LOCAL tempFileHandle:DWORD

 00000EBE  E8 00000000 E		call clrscr
 00000EC3  BA 00000189 R		mov edx, offset StudentTeacherMenuFile
 00000EC8  E8 00000000 E		call OpenInputFile
 00000ECD  89 45 FC			mov tempFileHandle, eax
 00000ED0  B9 00000BEA			mov ecx, 3050
 00000ED5  BA 00000275 R		mov edx, offset StudentTeacherMenuPrint
 00000EDA  8B 45 FC			mov eax, tempFileHandle
 00000EDD  E8 00000000 E		call ReadFromFile
 00000EE2  E8 FFFFFEDE			call Student_Teacher_Colour
 00000EE7  8B 45 FC			mov eax, tempFileHandle
 00000EEA  E8 00000000 E		call CloseFile

					ret
 00000EF4			Student_Teacher_Menu ENDP

 00000EF4			Teacher_Menu_2 PROC USES EAX EDX ECX
					LOCAL tempFileHandle2:DWORD

 00000EFD  E8 00000000 E		call clrscr
 00000F02  BA 000001BA R		mov edx, offset TeacherMenu2File
 00000F07  E8 00000000 E		call OpenInputFile
 00000F0C  89 45 FC			mov tempFileHandle2, eax
 00000F0F  B9 00000BEA			mov ecx, 3050
 00000F14  BA 00000275 R		mov edx, offset StudentTeacherMenuPrint
 00000F19  8B 45 FC			mov eax, tempfileHandle2
 00000F1C  E8 00000000 E		call ReadFromFile
 00000F21  E8 FFFFFF17			call Teacher_Menu_Colour
 00000F26  8B 45 FC			mov eax, tempFileHandle2
 00000F29  E8 00000000 E		call CloseFile

					ret
 00000F33			Teacher_Menu_2 ENDP

 00000F33			Student_Menu_Colour PROC USES EAX ECX ESI
 00000F36  B9 000000F4			mov ecx, 244
 00000F3B  BE 00000275 R		mov esi, offset StudentTeacherMenuPrint
 00000F40  FC				cld
 00000F41				colourloop11:
 00000F41  AC					lodsb
 00000F42  E8 00000000 E			call WriteChar
 00000F47  E2 F8				LOOP colourloop11

 00000F49  B9 00000015			mov ecx, 21
 00000F4E			outercolourloop1:
 00000F4E  51				push ecx
 00000F4F  B8 0000000E			mov eax, yellow+(black*16)
 00000F54  E8 00000000 E		call SetTextColor
 00000F59  B9 0000003C			mov ecx, 60
 00000F5E				colourloop22:
 00000F5E  AC					lodsb
 00000F5F  E8 00000000 E			call WriteChar
 00000F64  E2 F8				LOOP colourloop22

 00000F66  B8 0000000F			mov eax, white+(black*16)
 00000F6B  E8 00000000 E		call SetTextColor
 00000F70  AC				lodsb
 00000F71  E8 00000000 E		call WriteChar

 00000F76  B8 00000004			mov eax, red+(black*16)
 00000F7B  E8 00000000 E		call SetTextColor
 00000F80  B9 0000003D			mov ecx, 61
 00000F85				colourloop33:
 00000F85  AC					lodsb
 00000F86  E8 00000000 E			call WriteChar
 00000F8B  E2 F8				LOOP colourloop33
 00000F8D  59				pop ecx
 00000F8E  E2 BE			LOOP outercolourloop1

 00000F90  B8 0000000F			mov eax, white+(black*16)
 00000F95  E8 00000000 E		call SetTextColor
 00000F9A  B9 000000F4			mov ecx, 244
 00000F9F				colourloop44:
 00000F9F  AC					lodsb
 00000FA0  E8 00000000 E			call WriteChar
 00000FA5  E2 F8				LOOP colourloop44

					ret
 00000FAB			Student_Menu_Colour ENDP

 00000FAB			Student_Menu_2 PROC USES EAX EDX ECX
					LOCAL tempFileHandle3:DWORD

 00000FB4  E8 00000000 E		call clrscr
 00000FB9  BA 000001CD R		mov edx, offset StudentMenu2File
 00000FBE  E8 00000000 E		call OpenInputFile
 00000FC3  89 45 FC			mov tempFileHandle3, eax
 00000FC6  B9 00000BEA			mov ecx, 3050
 00000FCB  BA 00000275 R		mov edx, offset StudentTeacherMenuPrint
 00000FD0  8B 45 FC			mov eax, tempfileHandle3
 00000FD3  E8 00000000 E		call ReadFromFile
 00000FD8  E8 FFFFFF56			call Student_Menu_Colour
 00000FDD  8B 45 FC			mov eax, tempFileHandle3
 00000FE0  E8 00000000 E		call CloseFile

					ret
 00000FEA			Student_Menu_2 ENDP

 00000FEA			Choice_Selection_Menu PROC USES EAX EDX ECX
					LOCAL tempFileHandle2:DWORD
					
 00000FF3  BA 000001A2 R		mov edx, offset ChoiceSelectionMenuFile
 00000FF8  E8 00000000 E		call OpenInputFile
 00000FFD  89 45 FC			mov tempFileHandle2, eax
 00001000  B9 00000834			mov ecx, 2100
 00001005  BA 00000E5F R		mov edx, offset ChoiceSelectionMenuPrint
 0000100A  8B 45 FC			mov eax, tempFileHandle2
 0000100D  E8 00000000 E		call ReadFromFile
 00001012  B8 0000000B			mov eax, lightcyan+(black*16)						; setting background and forground for options
 00001017  E8 00000000 E		call SetTextColor
 0000101C  BA 00000E5F R		mov edx, offset ChoiceSelectionMenuPrint
 00001021  E8 00000000 E		call WriteString
 00001026  8B 45 FC			mov eax, tempFileHandle2
 00001029  E8 00000000 E		call CloseFile
 0000102E  B8 0000000F			mov eax, white+(black*16)						; resetting the colours to black and white
 00001033  E8 00000000 E		call SetTextColor

					ret
 0000103D			Choice_Selection_Menu ENDP

 0000103D			Get_Initial_Choice PROC USES EBX EDX
 0000103F  B8 00000090			mov eax, 0090h         ;ENABLE_MOUSE_INPUT | DISABLE_QUICK_EDIT_MODE 
					invoke SetConsoleMode, inputhandle, eax
 00001050				input_loop:
					invoke ReadConsoleInput,inputhandle,ADDR InputRecord,1,ADDR recordcount
 00001067  83 3D 000019AE R		cmp InputRecord.MouseEvent.dwEventFlags, 0002h 
	   02
 0000106E  75 E0			jne input_loop
 00001070  E8 00000000 E		call GetMaxXY
 00001075  66| D1 EA			shr dx,1
 00001078  66| 39 15			cmp InputRecord.Position.dwSize.X, dx
	   000019A2 R
 0000107F  76 07			jbe goto_teacher
 00001081  BB 00000002			mov ebx, 2
 00001086  EB 05			jmp done
 00001088				goto_teacher:
 00001088  BB 00000001			mov ebx, 1

 0000108D				done:

 0000108D  A1 000019B2 R		mov eax, ConsoleMode
					invoke SetConsoleMode, inputhandle, eax
 0000109E  8B C3			mov eax,ebx
					ret
 000010A3			Get_Initial_Choice ENDP

 000010A3			timeprintproc PROC USES EAX EDX
 000010A5  E8 FFFFF7AF				call timechecker
 000010AA  B8 0000004F		        mov eax, white+(red*16)
 000010AF  E8 00000000 E	        call SetTextColor
 000010B4  BA 0000011B R	        mov edx, offset TimeStr3                                                ; writing the time remaining for this section
 000010B9  E8 00000000 E	        call StrLength
 000010BE  83 C0 05		        add eax, 5
				        INVOKE PrintInMiddle, Addr TimeStr3, eax, 3
 000010CE  A1 00001D80 R	        mov eax, timeleftmin
 000010D3  E8 00000000 E	        call writedec
 000010D8  B0 3A		        mov al, ':'
 000010DA  E8 00000000 E	        call writechar
 000010DF  83 3D 00001D84 R	        cmp timeleftsec, 10
	   0A
 000010E6  73 0A		        jae _noZeroAdded_2
 000010E8  B8 00000000		        mov eax, 0
 000010ED  E8 00000000 E	        call WriteDec
 000010F2			_NoZeroAdded_2:
 000010F2  A1 00001D84 R	        mov eax, timeleftsec
 000010F7  E8 00000000 E	        call writedec
 000010FC  B8 0000000F		        mov eax, white+(black*16)
 00001101  E8 00000000 E	        call SetTextColor
 00001106  A1 00001D80 R			mov eax, timeleftmin
 0000110B  03 05 00001D84 R			add eax, timeleftsec
 00001111  83 F8 00				cmp eax, 0
 00001114  75 1F				jne _timeremaining
 00001116  80 3D 0000176C R			cmp timeStatus, 1
	   01
 0000111D  74 16				je _timeremaining
 0000111F  BB 0000171D R			mov ebx, offset timeIsUp
 00001124  8B D3				mov edx, ebx
 00001126  83 C2 1D				add edx, 29
 00001129  E8 00000000 E			call MsgBox					; opening message box for time up string at time = 0
 0000112E  C6 05 0000176C R			mov timeStatus, 1
	   01

 00001135			_timeremaining:
						ret
 00001138			timeprintproc ENDP

 00001138			Get_Student_Input PROC USES EBX
					LOCAL counter:DWORD

 0000113F  B8 00000090			mov eax, 0090h         ;ENABLE_MOUSE_INPUT | DISABLE_QUICK_EDIT_MODE 
					invoke SetConsoleMode, inputhandle, eax
 00001150				input_loop_student:
 00001150  E8 00000000 E		call getMseconds
 00001155  2B 05 00001D7C R		sub eax, currtime
 0000115B  89 45 FC			mov counter, eax
 0000115E  81 7D FC			cmp counter, 1000
	   000003E8
 00001165  72 05			jb __inputinvoke
 00001167  E8 FFFFFF37			call timeprintproc
 0000116C			__inputinvoke:
					invoke ReadConsoleInput,inputhandle,ADDR InputRecord,1,ADDR recordcount
 00001183  83 3D 000019AE R		cmp InputRecord.MouseEvent.dwEventFlags, 0002h 
	   02
 0000118A  75 C4			jne input_loop_student
 0000118C  66| 83 3D			cmp InputRecord.Position.dwSize.X, 60
	   000019A2 R 3C
 00001194  77 1C			ja its_B_D
 00001196  66| 83 3D			cmp InputRecord.Position.dwSize.Y, 22
	   000019A4 R 16
 0000119E  72 04			jb its_A
 000011A0  B0 63			mov al, 'c'
 000011A2  EB 2A			jmp end_of_func
 000011A4				its_A:
 000011A4  66| 83 3D			cmp InputRecord.Position.dwSize.Y, 14
	   000019A4 R 0E
 000011AC  72 A2			jb input_loop_student
 000011AE  B0 61			mov al, 'a'
 000011B0  EB 1C			jmp end_of_func
 000011B2				its_B_D:
 000011B2  66| 83 3D			cmp InputRecord.Position.dwSize.Y, 22
	   000019A4 R 16
 000011BA  72 04			jb its_B
 000011BC  B0 64			mov al, 'd'
 000011BE  EB 0E			jmp end_of_func
 000011C0				its_B:
 000011C0  66| 83 3D			cmp InputRecord.Position.dwSize.Y, 14
	   000019A4 R 0E
 000011C8  72 86			jb input_loop_student
 000011CA  B0 62			mov al, 'b'
 000011CC  EB 00			jmp end_of_func

 000011CE				end_of_func:
 000011CE  8A D8			mov bl,al
 000011D0  A1 000019B2 R		mov eax, ConsoleMode
					invoke SetConsoleMode, inputhandle, eax
 000011E1  8A C3			mov al,bl
					ret
 000011E6			Get_Student_Input ENDP

 000011E6			RecordFiler PROC USES EAX EBX ECX EDX ESI EDI
					LOCAL recordHandle: DWORD

 000011F2  BA 00001695 R		mov edx, offset recordname
 000011F7  E8 00000000 E		call OpenInputFile
 000011FC  89 45 FC			mov recordHandle, eax
 000011FF  B9 00000140			mov ecx, 320
 00001204  BA 0000181A R		mov edx, offset scores
 00001209  E8 00000000 E		call ReadFromFile

					;movzx scores.score_points, score
 0000120E  BA 0000181A R		mov edx, offset scores

 00001213  B9 00000014			mov ecx, 20
 00001218				comparer:
 00001218  8B 02				mov eax, [edx]
 0000121A  83 C2 10				add edx, type scores
 0000121D  83 F8 FF				cmp eax, -1
 00001220  74 02				je out_comparer
 00001222  E2 F4			loop comparer

 00001224				out_comparer:
 00001224  83 EA 10				sub edx, type scores
 00001227  0F B6 05				movzx eax, score
	   00001D6D R
 0000122E  89 02				mov [edx], eax
 00001230  83 C2 04				add edx, 4
						Invoke str_copy, ADDR roll, edx
 0000123E  83 C2 0A				add edx, 10
 00001241  66| A1				mov ax, t_marks
	   00001693 R
 00001247  66| 89 02				mov [edx], ax

 0000124A  8B 45 FC			mov eax, recordHandle
 0000124D  E8 00000000 E		call CloseFile

 00001252  BA 00001695 R		mov edx, offset recordname
 00001257  E8 00000000 E		call CreateOutputFile
 0000125C  89 45 FC			mov recordHandle, eax
 0000125F  B9 00000140			mov ecx, 320
 00001264  BA 0000181A R		mov edx, offset scores
 00001269  8B 45 FC			mov eax, recordHandle
 0000126C  E8 00000000 E		call WritetoFile

 00001271  8B 45 FC			mov eax, recordHandle
 00001274  E8 00000000 E		call CloseFile

					ret
 00001281			RecordFiler ENDP

 00001281			RecordReader PROC USES EAX EBX ECX EDX ESI EDI
					LOCAL recordHandle: DWORD
 0000128D  E8 00000000 E		call clrscr
 00001292  BA 00001695 R		mov edx, offset recordname
 00001297  E8 00000000 E		call OpenInputFile
 0000129C  89 45 FC			mov recordHandle, eax
 0000129F  B9 00000140			mov ecx, 320
 000012A4  BA 0000181A R		mov edx, offset scores
 000012A9  E8 00000000 E		call ReadFromFile
 000012AE  8B 45 FC			mov eax, recordHandle
 000012B1  E8 00000000 E		call CloseFile

					INVOKE PrintInMiddle, Addr score_msg, lengthof score_msg-1, 1
					;mov edx, offset score_msg
					;call WriteString
 000012C4  E8 00000000 E		call Crlf
 000012C9  E8 00000000 E		call Crlf
 000012CE  BA 00001969 R		mov edx, offset score_msg2
 000012D3  E8 00000000 E		call WriteString
 000012D8  E8 00000000 E		call Crlf
 000012DD  E8 00000000 E		call crlf

 000012E2  BE 0000181A R		mov esi, offset scores
 000012E7  B9 00000014			mov ecx, 20
 000012EC				printer:
 000012EC  8B 06				mov eax, [esi]
 000012EE  83 F8 FF				cmp eax, -1
 000012F1  74 4E				je out_printer
 000012F3  83 C6 04				add esi, 4
 000012F6  8B D6				mov edx, esi
 000012F8  E8 00000000 E			call WriteString
 000012FD  51					push ecx
 000012FE  B9 0000000A				mov ecx, 10
					
 00001303					spaceloop1:
 00001303  B0 20					mov al, " "
 00001305  E8 00000000 E				call WriteChar
 0000130A  E2 F7				loop spaceloop1

 0000130C  59					pop ecx
 0000130D  83 EE 04				sub esi, 4
 00001310  8B 06				mov eax, [esi]
 00001312  E8 00000000 E			call WriteDec
 00001317  51					push ecx
 00001318  B9 0000000A				mov ecx, 10
					
 0000131D					spaceloop2:
 0000131D  B0 20					mov al, " "
 0000131F  E8 00000000 E				call WriteChar
 00001324  E2 F7				loop spaceloop2

 00001326  59					pop ecx
 00001327  83 C6 0E				add esi, 14
 0000132A  B8 00000000				mov eax, 0
 0000132F  66| 8B 06				mov ax, [esi]
 00001332  E8 00000000 E			call WriteDec
 00001337  E8 00000000 E			call Crlf
 0000133C  83 C6 02				add esi, 2

 0000133F  E2 AB			loop printer

 00001341				out_printer:
 00001341  E8 00000000 E			call crlf
 00001346  E8 00000000 E			call WaitMsg
						ret
 00001353			RecordReader ENDP

 00001353			ResultsOrMake PROC
 00001353  E8 FFFFFCE5			call Get_Initial_Choice
 00001358  C3				ret
 00001359			ResultsOrMake ENDP

 00001359			main PROC
 00001359			_AskMakeOrTake:
 00001359  50				push eax
 0000135A  B8 0000000F			mov eax, white+(black*16)
 0000135F  E8 00000000 E		call SetTextColor
 00001364  58				pop eax
 00001365  E8 FFFFFB4B			call Student_Teacher_Menu	
					
					invoke GetStdHandle,STD_INPUT_HANDLE					; setting up mouse implementation
 00001371  A3 00001992 R		mov inputhandle,eax
					invoke GetStdHandle,STD_OUTPUT_HANDLE
 0000137D  A3 00001996 R		mov outputhandle, eax
					invoke SetConsoleScreenBufferSize, eax, max_size
					invoke GetConsoleMode, inputhandle, ADDR ConsoleMode
 0000139E  A1 000019B2 R		mov eax, ConsoleMode
 000013A3  E8 FFFFFC95			call Get_Initial_Choice ;returns in eax

 000013A8  3C 01			cmp al, 1
 000013AA  74 0F			je _MakeTestLabel
 000013AC  3C 02			cmp al, 2
 000013AE  0F 84 0000009B		je _TakeTestLabel
 000013B4  E8 00000000 E		call clrscr
 000013B9  EB 9E			jmp _AskMakeOrTake

 000013BB			_MakeTestLabel:
 000013BB  E8 00000000 E		call clrscr
 000013C0  BA 000016BD R		mov edx, offset passwordStr				; asking for password
 000013C5  E8 00000000 E		call WriteString
 000013CA  BA 000016A9 R		mov edx, offset passwordInput
 000013CF  B9 00000013			mov ecx, 19
 000013D4  E8 00000000 E		call ReadString
 000013D9  BE 000016A0 R		mov esi, offset password
 000013DE  BF 000016A9 R		mov edi, offset passwordInput			
 000013E3  8B D7			mov edx, edi
 000013E5  E8 00000000 E		call StrLength
 000013EA  8B D8			mov ebx, eax
 000013EC  8B D6			mov edx, esi
 000013EE  E8 00000000 E		call StrLength							; comparing password length first
 000013F3  3B C3			cmp eax, ebx
 000013F5  75 26			jne _incorrectPass
 000013F7  B9 00000008			mov ecx, 8
 000013FC  FC				cld
 000013FD  F3/ A6			repe cmpsb								; comparing password
 000013FF  75 1C			jne _incorrectPass
 00001401  E8 FFFFFAEE			call Teacher_Menu_2
 00001406  E8 FFFFFF48			call ResultsOrMake
 0000140B  3C 01			cmp al, 1
 0000140D  74 04			je _seeallrecords
 0000140F  3C 02			cmp al, 2
 00001411  74 23			je _maketestlabel2
 00001413			_seeallrecords:
 00001413  E8 FFFFFE69			call RecordReader
 00001418  E9 FFFFFF3C			jmp _AskMakeOrTake
 0000141D			_incorrectPass:							; sending to main menu if password incorrect
 0000141D  BA 000016DC R		mov edx, offset IncorrectPass
 00001422  E8 00000000 E		call WriteString
 00001427  B8 000007D0			mov eax, 2000
 0000142C  E8 00000000 E		call Delay
 00001431  E9 FFFFFF23			jmp _AskMakeOrTake

 00001436			_maketestlabel2:
 00001436  E8 FFFFEBC5			call QuizCodeTeacher

 0000143B  E8 FFFFF188			call MakeTest				; making test

 00001440  A1 00002D92 R		mov eax, filehandle			; closing file
 00001445  E8 00000000 E		call CloseFile
 0000144A  E9 FFFFFF0A			jmp _AskMakeOrTake
					
 0000144F			_TakeTestLabel:
 0000144F  E8 FFFFEC21			call QuizCodeStudent		; asking for quiz code

 00001454  E8 FFFFF4B8			call TakeTest

				;	mov eax, filehandle
				;	call CloseFile
 00001459  E9 FFFFFEFB			jmp _AskMakeOrTake

 0000145E			__exit:
					exit
 00001465			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.28.29336.0	    01/19/21 23:50:48
My First Program (Test.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
Score_Card . . . . . . . . . . .	 00000010
  score_points . . . . . . . . .	 00000000	 DWord
  roll_no  . . . . . . . . . . .	 00000004	 Byte
  total_marks  . . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord
_INPUT_RECORD  . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  KeyEvent . . . . . . . . . . .	 00000004	 XmmWord
  MouseEvent . . . . . . . . . .	 00000004	 XmmWord
  Position . . . . . . . . . . .	 00000004	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00002DAD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00001465 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AskForSectionNames . . . . . . .	P Near	 0000015B _TEXT	Length= 00000046 Public STDCALL
  askSectionsLoop  . . . . . . .	L Near	 0000017A _TEXT	
AskForTestName . . . . . . . . .	P Near	 000004B6 _TEXT	Length= 00000023 Public STDCALL
AskNegativeMarking . . . . . . .	P Near	 00000596 _TEXT	Length= 00000032 Public STDCALL
  _negativeMarkLabel . . . . . .	L Near	 0000059D _TEXT	
  _negativeMarkProceed . . . . .	L Near	 000005C0 _TEXT	
AskStartEndTime  . . . . . . . .	P Near	 000004D9 _TEXT	Length= 000000BD Public STDCALL
  startLabel1  . . . . . . . . .	L Near	 000004E2 _TEXT	
  StartError1  . . . . . . . . .	L Near	 000004FE _TEXT	
  startLabel2  . . . . . . . . .	L Near	 0000050A _TEXT	
  StartError2  . . . . . . . . .	L Near	 00000529 _TEXT	
  endLabel1  . . . . . . . . . .	L Near	 0000053A _TEXT	
  endError1  . . . . . . . . . .	L Near	 00000584 _TEXT	
  _continueTime  . . . . . . . .	L Near	 00000591 _TEXT	
CheckAnswerSheet . . . . . . . .	P Near	 00000CB0 _TEXT	Length= 00000115 Public STDCALL
  _checkAnswersLoop  . . . . . .	L Near	 00000CBA _TEXT	
  _seeAnswerSheet  . . . . . . .	L Near	 00000D04 _TEXT	
  AnswerSheetLoop  . . . . . . .	L Near	 00000D2E _TEXT	
  AnswerSheetLoop2 . . . . . . .	L Near	 00000D68 _TEXT	
  _notAllowedYet . . . . . . . .	L Near	 00000DAD _TEXT	
  _gotomain  . . . . . . . . . .	L Near	 00000DC4 _TEXT	
ChoiceLimiter  . . . . . . . . .	P Near	 00000497 _TEXT	Length= 0000001F Public STDCALL
  quit . . . . . . . . . . . . .	L Near	 000004B5 _TEXT	
Choice_Selection_Menu  . . . . .	P Near	 00000FEA _TEXT	Length= 00000053 Public STDCALL
  tempFileHandle2  . . . . . . .	DWord	 bp - 00000004
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplaySectionInfo . . . . . . .	P Near	 000007DC _TEXT	Length= 0000007D Public STDCALL
DisplayTestInfo  . . . . . . . .	P Near	 000001CA _TEXT	Length= 000000CB Public STDCALL
  printSectionNames  . . . . . .	L Near	 0000021F _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Get_Initial_Choice . . . . . . .	P Near	 0000103D _TEXT	Length= 00000066 Public STDCALL
  input_loop . . . . . . . . . .	L Near	 00001050 _TEXT	
  goto_teacher . . . . . . . . .	L Near	 00001088 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000108D _TEXT	
Get_Student_Input  . . . . . . .	P Near	 00001138 _TEXT	Length= 000000AE Public STDCALL
  counter  . . . . . . . . . . .	DWord	 bp - 00000004
  input_loop_student . . . . . .	L Near	 00001150 _TEXT	
  __inputinvoke  . . . . . . . .	L Near	 0000116C _TEXT	
  its_A  . . . . . . . . . . . .	L Near	 000011A4 _TEXT	
  its_B_D  . . . . . . . . . . .	L Near	 000011B2 _TEXT	
  its_B  . . . . . . . . . . . .	L Near	 000011C0 _TEXT	
  end_of_func  . . . . . . . . .	L Near	 000011CE _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MakeTest . . . . . . . . . . . .	P Near	 000005C8 _TEXT	Length= 00000214 Public STDCALL
  QuestionCount  . . . . . . . .	Byte	 bp - 00000001
  start  . . . . . . . . . . . .	L Near	 000005D8 _TEXT	
  __notZero1 . . . . . . . . . .	L Near	 000005F9 _TEXT	
  _storesection  . . . . . . . .	L Near	 0000060A _TEXT	
  _proceed . . . . . . . . . . .	L Near	 0000060F _TEXT	
  __notZero2 . . . . . . . . . .	L Near	 0000062B _TEXT	
  _storequestions  . . . . . . .	L Near	 0000063C _TEXT	
  _proceed1  . . . . . . . . . .	L Near	 00000641 _TEXT	
  __notZero3 . . . . . . . . . .	L Near	 0000065D _TEXT	
  _proceed2  . . . . . . . . . .	L Near	 0000066E _TEXT	
  _for1  . . . . . . . . . . . .	L Near	 00000693 _TEXT	
  _for2  . . . . . . . . . . . .	L Near	 000006A4 _TEXT	
  AnswerChoice . . . . . . . . .	L Near	 00000762 _TEXT	
  _dothis  . . . . . . . . . . .	L Near	 0000079A _TEXT	
  _proceed3  . . . . . . . . . .	L Near	 000007B0 _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintInMiddle  . . . . . . . . .	P Near	 000001A1 _TEXT	Length= 00000029 Public STDCALL
  stringAddr . . . . . . . . . .	DWord	 bp + 00000008
  lengthStr  . . . . . . . . . .	DWord	 bp + 0000000C
  lineNumber . . . . . . . . . .	Byte	 bp + 00000010
QuizCodeStudent  . . . . . . . .	P Near	 00000075 _TEXT	Length= 00000088 Public STDCALL
  studentcodeask . . . . . . . .	L Near	 0000007F _TEXT	
  studentcodecorrect . . . . . .	L Near	 000000C1 _TEXT	
  quizdoesnotexist . . . . . . .	L Near	 000000EB _TEXT	
  _studentquizcontinue . . . . .	L Near	 000000F7 _TEXT	
QuizCodeTeacher  . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000075 Public STDCALL
  quizcodeask  . . . . . . . . .	L Near	 00000018 _TEXT	
  quizcodecorrect  . . . . . . .	L Near	 0000004C _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomizer . . . . . . . . . . .	P Near	 00000295 _TEXT	Length= 0000005F Public STDCALL
  finder . . . . . . . . . . . .	L Near	 000002BF _TEXT	
  newnumfound  . . . . . . . . .	L Near	 000002E0 _TEXT	
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadNames  . . . . . . . . . . .	P Near	 0000012C _TEXT	Length= 0000002F Public STDCALL
ReadQuestions  . . . . . . . . .	P Near	 00000385 _TEXT	Length= 00000027 Public STDCALL
ReadSectionQuestion  . . . . . .	P Near	 000002F4 _TEXT	Length= 00000091 Public STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RecordFiler  . . . . . . . . . .	P Near	 000011E6 _TEXT	Length= 0000009B Public STDCALL
  recordHandle . . . . . . . . .	DWord	 bp - 00000004
  comparer . . . . . . . . . . .	L Near	 00001218 _TEXT	
  out_comparer . . . . . . . . .	L Near	 00001224 _TEXT	
RecordReader . . . . . . . . . .	P Near	 00001281 _TEXT	Length= 000000D2 Public STDCALL
  recordHandle . . . . . . . . .	DWord	 bp - 00000004
  printer  . . . . . . . . . . .	L Near	 000012EC _TEXT	
  spaceloop1 . . . . . . . . . .	L Near	 00001303 _TEXT	
  spaceloop2 . . . . . . . . . .	L Near	 0000131D _TEXT	
  out_printer  . . . . . . . . .	L Near	 00001341 _TEXT	
Reinitialize . . . . . . . . . .	P Near	 0000046C _TEXT	Length= 0000002B Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000047C _TEXT	
ResultsOrMake  . . . . . . . . .	P Near	 00001353 _TEXT	Length= 00000006 Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Student_Menu_2 . . . . . . . . .	P Near	 00000FAB _TEXT	Length= 0000003F Public STDCALL
  tempFileHandle3  . . . . . . .	DWord	 bp - 00000004
Student_Menu_Colour  . . . . . .	P Near	 00000F33 _TEXT	Length= 00000078 Public STDCALL
  colourloop11 . . . . . . . . .	L Near	 00000F41 _TEXT	
  outercolourloop1 . . . . . . .	L Near	 00000F4E _TEXT	
  colourloop22 . . . . . . . . .	L Near	 00000F5E _TEXT	
  colourloop33 . . . . . . . . .	L Near	 00000F85 _TEXT	
  colourloop44 . . . . . . . . .	L Near	 00000F9F _TEXT	
Student_Teacher_Colour . . . . .	P Near	 00000DC5 _TEXT	Length= 00000078 Public STDCALL
  colourloop1  . . . . . . . . .	L Near	 00000DD3 _TEXT	
  outercolourloop  . . . . . . .	L Near	 00000DE0 _TEXT	
  colourloop2  . . . . . . . . .	L Near	 00000DF0 _TEXT	
  colourloop3  . . . . . . . . .	L Near	 00000E17 _TEXT	
  colourloop4  . . . . . . . . .	L Near	 00000E31 _TEXT	
Student_Teacher_Menu . . . . . .	P Near	 00000EB5 _TEXT	Length= 0000003F Public STDCALL
  tempFileHandle . . . . . . . .	DWord	 bp - 00000004
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TakeTest . . . . . . . . . . . .	P Near	 00000911 _TEXT	Length= 0000039F Public STDCALL
  QuestionNumber . . . . . . . .	Byte	 bp - 00000001
  askrollagain . . . . . . . . .	L Near	 00000927 _TEXT	
  _endMinuteCheck  . . . . . . .	L Near	 0000099A _TEXT	
  wrongTime  . . . . . . . . . .	L Near	 0000099C _TEXT	
  _timeCorrect . . . . . . . . .	L Near	 000009B5 _TEXT	
  _QuestionLoop1 . . . . . . . .	L Near	 000009CA _TEXT	
  _QuestionLoop2 . . . . . . . .	L Near	 00000A0E _TEXT	
  _NoZeroAdded . . . . . . . . .	L Near	 00000A7D _TEXT	
  AnswerChoice2  . . . . . . . .	L Near	 00000B65 _TEXT	
  _dothis2 . . . . . . . . . . .	L Near	 00000B98 _TEXT	
  _AnswerCompare . . . . . . . .	L Near	 00000BAE _TEXT	
  scoredec . . . . . . . . . . .	L Near	 00000BC3 _TEXT	
  here . . . . . . . . . . . . .	L Near	 00000BD2 _TEXT	
  _NoTimeLeft  . . . . . . . . .	L Near	 00000BF7 _TEXT	
  _timeleft  . . . . . . . . . .	L Near	 00000C22 _TEXT	
  _positive  . . . . . . . . . .	L Near	 00000C5D _TEXT	
Teacher_Menu_2 . . . . . . . . .	P Near	 00000EF4 _TEXT	Length= 0000003F Public STDCALL
  tempFileHandle2  . . . . . . .	DWord	 bp - 00000004
Teacher_Menu_Colour  . . . . . .	P Near	 00000E3D _TEXT	Length= 00000078 Public STDCALL
  colourloop11 . . . . . . . . .	L Near	 00000E4B _TEXT	
  outercolourloop1 . . . . . . .	L Near	 00000E58 _TEXT	
  colourloop22 . . . . . . . . .	L Near	 00000E68 _TEXT	
  colourloop33 . . . . . . . . .	L Near	 00000E8F _TEXT	
  colourloop44 . . . . . . . . .	L Near	 00000EA9 _TEXT	
TimeChecker  . . . . . . . . . .	P Near	 00000859 _TEXT	Length= 000000B8 Public STDCALL
  timespent  . . . . . . . . . .	DWord	 bp - 00000004
  minutes  . . . . . . . . . . .	DWord	 bp - 00000008
  seconds  . . . . . . . . . . .	DWord	 bp - 0000000C
  notgreat . . . . . . . . . . .	L Near	 000008CD _TEXT	
  returner . . . . . . . . . . .	L Near	 000008EB _TEXT	
  subtractallowed  . . . . . . .	L Near	 00000902 _TEXT	
  returning  . . . . . . . . . .	L Near	 0000090B _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteNames . . . . . . . . . . .	P Near	 000000FD _TEXT	Length= 0000002F Public STDCALL
WriteQuestions . . . . . . . . .	P Near	 000003AC _TEXT	Length= 0000002F Public STDCALL
  show_error_file  . . . . . . .	L Near	 000003D2 _TEXT	
WriteSectionQuestion . . . . . .	P Near	 000003DB _TEXT	Length= 00000091 Public STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00001359 _TEXT	Length= 0000010C Public STDCALL
  _AskMakeOrTake . . . . . . . .	L Near	 00001359 _TEXT	
  _MakeTestLabel . . . . . . . .	L Near	 000013BB _TEXT	
  _seeallrecords . . . . . . . .	L Near	 00001413 _TEXT	
  _incorrectPass . . . . . . . .	L Near	 0000141D _TEXT	
  _maketestlabel2  . . . . . . .	L Near	 00001436 _TEXT	
  _TakeTestLabel . . . . . . . .	L Near	 0000144F _TEXT	
  __exit . . . . . . . . . . . .	L Near	 0000145E _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
timeprintproc  . . . . . . . . .	P Near	 000010A3 _TEXT	Length= 00000095 Public STDCALL
  _NoZeroAdded_2 . . . . . . . .	L Near	 000010F2 _TEXT	
  _timeremaining . . . . . . . .	L Near	 00001135 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AskEndTime . . . . . . . . . . .	Byte	 000019F6 _DATA	
AskSectionName . . . . . . . . .	Byte	 00000000 _DATA	
AskStartTime . . . . . . . . . .	Byte	 000019CC _DATA	
AskTestName  . . . . . . . . . .	Byte	 0000002A _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
ChoiceSelectionMenuFile  . . . .	Byte	 000001A2 _DATA	
ChoiceSelectionMenuPrint . . . .	Byte	 00000E5F _DATA	
ConsoleMode  . . . . . . . . . .	DWord	 000019B2 _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
EndTimeFile  . . . . . . . . . .	Word	 00001A58 _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
InputRecord  . . . . . . . . . .	_INPUT_RECORD  0000199E	_DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
MinutesStr . . . . . . . . . . .	Byte	 00000127 _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
Question10 . . . . . . . . . . .	Byte	 00002441 _DATA	
Question11 . . . . . . . . . . .	Byte	 00002500 _DATA	
Question12 . . . . . . . . . . .	Byte	 000025BF _DATA	
Question13 . . . . . . . . . . .	Byte	 0000267E _DATA	
Question14 . . . . . . . . . . .	Byte	 0000273D _DATA	
Question15 . . . . . . . . . . .	Byte	 000027FC _DATA	
Question16 . . . . . . . . . . .	Byte	 000028BB _DATA	
Question17 . . . . . . . . . . .	Byte	 0000297A _DATA	
Question18 . . . . . . . . . . .	Byte	 00002A39 _DATA	
Question19 . . . . . . . . . . .	Byte	 00002AF8 _DATA	
Question1  . . . . . . . . . . .	Byte	 00001D8A _DATA	
Question20 . . . . . . . . . . .	Byte	 00002BB7 _DATA	
Question2  . . . . . . . . . . .	Byte	 00001E49 _DATA	
Question3  . . . . . . . . . . .	Byte	 00001F08 _DATA	
Question4  . . . . . . . . . . .	Byte	 00001FC7 _DATA	
Question5  . . . . . . . . . . .	Byte	 00002086 _DATA	
Question6  . . . . . . . . . . .	Byte	 00002145 _DATA	
Question7  . . . . . . . . . . .	Byte	 00002204 _DATA	
Question8  . . . . . . . . . . .	Byte	 000022C3 _DATA	
Question9  . . . . . . . . . . .	Byte	 00002382 _DATA	
QuestionNoStr  . . . . . . . . .	Byte	 000000FA _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
Reinitializer  . . . . . . . . .	Byte	 00002C76 _DATA	
Roll . . . . . . . . . . . . . .	Byte	 00001D6E _DATA	
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
Score_msg3 . . . . . . . . . . .	Byte	 00001C96 _DATA	
Section1Name . . . . . . . . . .	Byte	 00000096 _DATA	
Section2Name . . . . . . . . . .	Byte	 000000AA _DATA	
Section3Name . . . . . . . . . .	Byte	 000000BE _DATA	
Section4Name . . . . . . . . . .	Byte	 000000D2 _DATA	
Section5Name . . . . . . . . . .	Byte	 000000E6 _DATA	
SectionStr2  . . . . . . . . . .	Byte	 0000008E _DATA	
SectionStr . . . . . . . . . . .	Byte	 00000082 _DATA	
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
StartTimeError . . . . . . . . .	Byte	 00001A5C _DATA	
StartTimeFile  . . . . . . . . .	Word	 00001A54 _DATA	
StudentMenu2File . . . . . . . .	Byte	 000001CD _DATA	
StudentTeacherMenuFile . . . . .	Byte	 00000189 _DATA	
StudentTeacherMenuPrint  . . . .	Byte	 00000275 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TeacherMenu2File . . . . . . . .	Byte	 000001BA _DATA	
TestName . . . . . . . . . . . .	Byte	 00000050 _DATA	
TimeStr2 . . . . . . . . . . . .	Byte	 00000114 _DATA	
TimeStr3 . . . . . . . . . . . .	Byte	 0000011B _DATA	
TimeStr  . . . . . . . . . . . .	Byte	 00000107 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
answerSheetLockedStr . . . . . .	Byte	 00001D41 _DATA	
audioFileError . . . . . . . . .	Byte	 00001805 _DATA	
audioFileTimeUp  . . . . . . . .	Byte	 0000180F _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
color  . . . . . . . . . . . . .	Word	 000019BA _DATA	
currtime . . . . . . . . . . . .	DWord	 00001D7C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterA_flag  . . . . . . . . . .	Byte	 00001D40 _DATA	
enterA_support . . . . . . . . .	Byte	 00001D00 _DATA	
enterA . . . . . . . . . . . . .	Byte	 00001CC7 _DATA	
enterC . . . . . . . . . . . . .	Byte	 00001CB7 _DATA	
enterQ . . . . . . . . . . . . .	Byte	 00001CA7 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
filehandle . . . . . . . . . . .	DWord	 00002D92 _DATA	
filename . . . . . . . . . . . .	Byte	 00002D85 _DATA	
format . . . . . . . . . . . . .	Byte	 00002DAA _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
incorrectPass  . . . . . . . . .	Byte	 000016DC _DATA	
inputhandle  . . . . . . . . . .	DWord	 00001992 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mainMenu . . . . . . . . . . . .	Byte	 0000014D _DATA	
max_size . . . . . . . . . . . .	COORD	 000019B6 _DATA	
msg1_support . . . . . . . . . .	Byte	 00001AA5 _DATA	
msg1 . . . . . . . . . . . . . .	Byte	 00001A81 _DATA	
msg2_support . . . . . . . . . .	Byte	 00001B17 _DATA	
msg2 . . . . . . . . . . . . . .	Byte	 00001AE5 _DATA	
msg3 . . . . . . . . . . . . . .	Byte	 00001B5A _DATA	
msg4 . . . . . . . . . . . . . .	Byte	 00001B8D _DATA	
msg5 . . . . . . . . . . . . . .	Byte	 00001BAC _DATA	
msg6 . . . . . . . . . . . . . .	Byte	 00001C7C _DATA	
negativeByte . . . . . . . . . .	Byte	 00001804 _DATA	
negativeMarkingError . . . . . .	Byte	 000017CE _DATA	
negativeMarkingStr . . . . . . .	Byte	 000017A0 _DATA	
numQuestions . . . . . . . . . .	Byte	 00001D89 _DATA	
numSections  . . . . . . . . . .	Byte	 00001D88 _DATA	
offarray . . . . . . . . . . . .	DWord	 00002D35 _DATA	
outputhandle . . . . . . . . . .	DWord	 00001996 _DATA	
passwordInput  . . . . . . . . .	Byte	 000016A9 _DATA	
passwordStr  . . . . . . . . . .	Byte	 000016BD _DATA	
password . . . . . . . . . . . .	Byte	 000016A0 _DATA	
quizcodeStr2 . . . . . . . . . .	Byte	 00000203 _DATA	
quizcodeStr3 . . . . . . . . . .	Byte	 0000023C _DATA	
quizcodeStr  . . . . . . . . . .	Byte	 000001E0 _DATA	
quizcode . . . . . . . . . . . .	Byte	 0000025E _DATA	
recordcount  . . . . . . . . . .	DWord	 0000199A _DATA	
recordname . . . . . . . . . . .	Byte	 00001695 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score_msg2 . . . . . . . . . . .	Byte	 00001969 _DATA	
score_msg  . . . . . . . . . . .	Byte	 0000195A _DATA	
scores . . . . . . . . . . . . .	Score_Card  0000181A _DATA	
score  . . . . . . . . . . . . .	Byte	 00001D6D _DATA	
shadow . . . . . . . . . . . . .	Byte	 00002D96 _DATA	
studentStr . . . . . . . . . . .	Byte	 00000179 _DATA	
t_marks  . . . . . . . . . . . .	Word	 00001693 _DATA	
teacherStr . . . . . . . . . . .	Byte	 00000169 _DATA	
timeCmp  . . . . . . . . . . . .	SYSTEMTIME  000019BC _DATA	
timeIsUp . . . . . . . . . . . .	Byte	 0000171D _DATA	
timeOverStr  . . . . . . . . . .	Byte	 00000130 _DATA	
timeStatus . . . . . . . . . . .	Byte	 0000176C _DATA	
timeleftmin  . . . . . . . . . .	DWord	 00001D80 _DATA	
timeleftsec  . . . . . . . . . .	DWord	 00001D84 _DATA	
totaltime  . . . . . . . . . . .	DWord	 00001D78 _DATA	
txtStr . . . . . . . . . . . . .	Byte	 00000268 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wrongTimeStr . . . . . . . . . .	Byte	 0000176D _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
